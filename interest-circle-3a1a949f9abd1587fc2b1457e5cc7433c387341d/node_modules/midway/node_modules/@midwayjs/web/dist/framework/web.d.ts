import { IMidwayBootstrapOptions, MidwayFrameworkType } from '@midwayjs/core';
import { IMidwayWebConfigurationOptions } from '../interface';
import { MidwayKoaBaseFramework } from '@midwayjs/koa';
import { Application, Context, Router, EggLogger } from 'egg';
export declare class MidwayWebFramework extends MidwayKoaBaseFramework<Application, Context, IMidwayWebConfigurationOptions> {
    app: Application;
    configurationOptions: IMidwayWebConfigurationOptions;
    prioritySortRouters: Array<{
        priority: number;
        router: Router;
    }>;
    protected loggers: {
        [name: string]: EggLogger;
    };
    configure(options: IMidwayWebConfigurationOptions): MidwayWebFramework;
    initialize(options: IMidwayBootstrapOptions): Promise<void>;
    protected beforeContainerInitialize(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    protected initializeLogger(): Promise<void>;
    applicationInitialize(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    protected afterContainerReady(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    getApplication(): Application;
    getFrameworkType(): MidwayFrameworkType;
    getLogger(name?: string): any;
    /**
     * 这个方法 egg-cluster 不走，只有单进程模式使用 @midwayjs/bootstrap 才会执行
     */
    run(): Promise<void>;
    /**
     * 这个方法 egg-cluster 不走，只有单进程模式使用 @midwayjs/bootstrap 才会执行
     */
    protected beforeStop(): Promise<void>;
    protected createRouter(routerOptions: any): Router;
    protected setContextLoggerClass(BaseContextLogger: any): void;
}
//# sourceMappingURL=web.d.ts.map