/// <reference types="node" />
import { IMidwayBootstrapOptions, IMidwayContainer, IMidwayFramework, MidwayFrameworkType } from '@midwayjs/core';
import { IMidwayWebConfigurationOptions, IMidwayWebApplication } from '../interface';
import { Server } from 'net';
import { LoggerOptions } from '@midwayjs/logger';
import { MidwayKoaContextLogger } from '@midwayjs/koa';
export declare class MidwayWebSingleProcessFramework implements IMidwayFramework<IMidwayWebApplication, IMidwayWebConfigurationOptions> {
    app: IMidwayWebApplication;
    agent: any;
    configurationOptions: IMidwayWebConfigurationOptions;
    private isTsMode;
    private server;
    getApplication(): IMidwayWebApplication;
    getFrameworkType(): MidwayFrameworkType;
    run(): Promise<void>;
    configure(options?: IMidwayWebConfigurationOptions): MidwayWebSingleProcessFramework;
    getApplicationContext(): IMidwayContainer;
    getConfiguration(key?: string): any;
    getCurrentEnvironment(): string;
    initialize(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    loadExtension(): Promise<void>;
    stop(): Promise<void>;
    getBaseDir(): string;
    getAppDir(): string;
    getLogger(name?: string): import("@midwayjs/logger").ILogger;
    getCoreLogger(): import("egg-logger").EggLogger;
    getProjectName(): string;
    createLogger(name: string, options?: LoggerOptions): import("@midwayjs/logger").ILogger;
    getServer(): Server;
    getFrameworkName(): string;
    getDefaultContextLoggerClass(): typeof MidwayKoaContextLogger;
    loadLifeCycles(): void;
}
//# sourceMappingURL=singleProcess.d.ts.map