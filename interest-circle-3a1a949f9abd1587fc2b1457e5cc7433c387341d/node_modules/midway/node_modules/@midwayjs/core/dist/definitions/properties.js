"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectProperties = void 0;
const _ = require("../common/lodashWrap");
const util_1 = require("util");
class ObjectProperties {
    constructor() {
        this.innerConfig = {};
    }
    get size() {
        return this.keys().length;
    }
    keys() {
        return Object.keys(this.innerConfig);
    }
    get(key, ...args) {
        if (args && args.length > 0) {
            args.unshift(_.get(this.innerConfig, key));
            // eslint-disable-next-line prefer-spread
            return util_1.format.apply(null, args);
        }
        return _.get(this.innerConfig, key);
    }
    dup(key) {
        if (!this.has(key)) {
            return null;
        }
        return JSON.parse(JSON.stringify(_.get(this.innerConfig, key)));
    }
    has(key) {
        return this.innerConfig[key] !== undefined;
    }
    set(key, value) {
        const origin = this.get(key);
        _.set(this.innerConfig, key, value);
        return origin;
    }
    putAll(props) {
        const keys = props.keys();
        for (const key of keys) {
            if (typeof this.innerConfig[key] === 'object') {
                this.set(key, _.defaultsDeep(props.get(key), this.innerConfig[key]));
            }
            else {
                this.set(key, props.get(key));
            }
        }
    }
    putObject(props, needClone = false) {
        if (needClone) {
            const tmp = _.cloneDeep(props);
            _.defaultsDeep(tmp, this.innerConfig);
            this.innerConfig = tmp;
        }
        else {
            _.defaultsDeep(props, this.innerConfig);
            this.innerConfig = props;
        }
    }
    stringPropertyNames() {
        return this.keys();
    }
    getProperty(key, defaultValue) {
        if (this.has(key)) {
            return this.get(key);
        }
        return defaultValue;
    }
    addProperty(key, value) {
        this.set(key, value);
    }
    setProperty(key, value) {
        return this.set(key, value);
    }
    clear() {
        this.innerConfig = {};
    }
    toJSON() {
        return JSON.parse(JSON.stringify(this.innerConfig));
    }
    clone() {
        const cfg = new ObjectProperties();
        cfg.putObject(this.toJSON());
        return cfg;
    }
}
exports.ObjectProperties = ObjectProperties;
//# sourceMappingURL=properties.js.map