"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayConfigService = void 0;
const extend = require("extend2");
const path_1 = require("path");
const util_1 = require("../util");
const fs_1 = require("fs");
const decorator_1 = require("@midwayjs/decorator");
const util = require("util");
const debug = util.debuglog('midway:config');
class MidwayConfigService {
    constructor(container) {
        this.aliasMap = {
            prod: 'production',
            unittest: 'test',
        };
        this.isReady = false;
        this.externalObject = [];
        this.container = container;
        this.envDirMap = new Map();
    }
    add(configFilePaths) {
        for (const dir of configFilePaths) {
            if (typeof dir === 'string') {
                if (/\.\w+$/.test(dir)) {
                    // file
                    const env = this.getConfigEnv(dir);
                    const envSet = this.getEnvSet(env);
                    envSet.add(dir);
                    if (this.aliasMap[env]) {
                        this.getEnvSet(this.aliasMap[env]).add(dir);
                    }
                }
                else {
                    // directory
                    const fileStat = (0, fs_1.statSync)(dir);
                    if (fileStat.isDirectory()) {
                        const files = (0, fs_1.readdirSync)(dir);
                        this.add(files.map(file => {
                            return (0, path_1.join)(dir, file);
                        }));
                    }
                }
            }
            else {
                // object add
                for (const env in dir) {
                    const envSet = this.getEnvSet(env);
                    envSet.add(dir[env]);
                }
            }
        }
    }
    addObject(obj) {
        if (this.isReady) {
            extend(true, this.configuration, obj);
        }
        else {
            this.externalObject.push(obj);
        }
    }
    getEnvSet(env) {
        if (!this.envDirMap.has(env)) {
            this.envDirMap.set(env, new Set());
        }
        return this.envDirMap.get(env);
    }
    getConfigEnv(configFilePath) {
        // parse env
        const configFileBaseName = (0, path_1.basename)(configFilePath);
        const splits = configFileBaseName.split('.');
        const suffix = splits.pop();
        if (suffix !== 'js' && suffix !== 'ts') {
            return suffix;
        }
        return splits.pop();
    }
    async load() {
        if (this.isReady)
            return;
        // get default
        const defaultSet = this.getEnvSet('default');
        // get current set
        const currentEnvSet = this.getEnvSet(this.container.getCurrentEnv());
        // merge set
        const target = {};
        for (const filename of [...defaultSet, ...currentEnvSet]) {
            let config = filename;
            if (typeof filename === 'string') {
                config = await this.loadConfig(filename, target);
            }
            if (!config) {
                continue;
            }
            debug('Loaded config %s, %j', filename, config);
            extend(true, target, config);
        }
        if (this.externalObject.length) {
            for (const externalObject of this.externalObject) {
                if (externalObject) {
                    debug('Loaded external object %j', externalObject);
                    extend(true, target, externalObject);
                }
            }
        }
        this.configuration = target;
        this.isReady = true;
    }
    getConfiguration(configKey) {
        if (configKey) {
            debug('get configuration by key => %s.', configKey);
            return (0, util_1.safelyGet)(configKey, this.configuration);
        }
        return this.configuration;
    }
    async loadConfig(configFilename, target) {
        debug('load config %s.', configFilename);
        let exports = require(configFilename);
        if (exports && exports['default'] && Object.keys(exports).length === 1) {
            exports = exports['default'];
        }
        let result = exports;
        if ((0, decorator_1.isFunction)(exports)) {
            const informationService = this.container.getInformationService();
            // eslint-disable-next-line prefer-spread
            result = exports.apply(null, [
                {
                    pkg: informationService.getPkg(),
                    name: informationService.getProjectName(),
                    baseDir: informationService.getBaseDir(),
                    appDir: informationService.getAppDir(),
                    HOME: informationService.getHome(),
                    root: informationService.getRoot(),
                },
                target,
            ]);
        }
        return result;
    }
    clearAllConfig() {
        this.configuration.clear();
    }
}
exports.MidwayConfigService = MidwayConfigService;
//# sourceMappingURL=configService.js.map