import { ObjectDefinitionOptions, ObjectIdentifier } from '@midwayjs/decorator';
import { IApplicationContext, IConfigService, IContainerConfiguration, IEnvironmentService, IInformationService, IMidwayContainer, IObjectDefinitionMetadata } from '../interface';
import { ResolverHandler } from './resolverHandler';
import { BaseApplicationContext } from './applicationContext';
export declare function clearContainerCache(): void;
export declare class MidwayContainer extends BaseApplicationContext implements IMidwayContainer {
    id: string;
    private debugLogger;
    private definitionMetadataList;
    protected resolverHandler: ResolverHandler;
    protected ctx: {};
    private configurationMap;
    private likeMainConfiguration;
    protected configService: IConfigService;
    protected environmentService: IEnvironmentService;
    protected informationService: IInformationService;
    protected aspectService: any;
    private directoryFilterArray;
    private attrMap;
    /**
     * 单个进程中上一次的 applicationContext 的 registry
     */
    static parentDefinitionMetadata: Map<string, IObjectDefinitionMetadata[]>;
    /**
     * 单进程中上一次的 applicationContext
     */
    static parentApplicationContext: IMidwayContainer;
    constructor(baseDir?: string, parent?: IApplicationContext);
    protected createContainerIdx(): number;
    init(): void;
    initService(): void;
    /**
     * load directory and traverse file to find bind class
     * @param opts
     */
    load(opts?: {
        loadDir: string | string[];
        pattern?: string | string[];
        ignore?: string | string[];
    }): void;
    loadDirectory(opts: {
        loadDir: string | string[];
        pattern?: string | string[];
        ignore?: string | string[];
        namespace?: string;
    }): void;
    bindClass(exports: any, namespace?: string, filePath?: string): void;
    bind<T>(target: T, options?: ObjectDefinitionOptions): void;
    bind<T>(identifier: ObjectIdentifier, target: T, options?: ObjectDefinitionOptions): void;
    protected restoreDefinition(definitionMeta: IObjectDefinitionMetadata): void;
    protected restoreDefinitions(definitionMetadataList: any): void;
    protected getDefinitionMetaList(): any[];
    protected bindModule(module: any, namespace?: string, filePath?: string): void;
    createChild(baseDir?: string): IMidwayContainer;
    registerDataHandler(handlerType: string, handler: (...args: any[]) => any): void;
    registerCustomBinding(objectDefinition: any, target: any): void;
    registerObject(identifier: ObjectIdentifier, target: any): void;
    createConfiguration(): IContainerConfiguration;
    addConfiguration(configuration: IContainerConfiguration): void;
    containsConfiguration(namespace: string): boolean;
    getConfigService(): IConfigService;
    getEnvironmentService(): IEnvironmentService;
    getInformationService(): IInformationService;
    setInformationService(informationService: any): void;
    getAspectService(): any;
    getCurrentEnv(): string;
    protected getCurrentNamespace(): string;
    resolve<T>(target: T): T;
    get<T>(identifier: any, args?: any): T;
    getAsync<T>(identifier: any, args?: any): Promise<T>;
    protected getIdentifier(target: any): string;
    ready(): Promise<void>;
    stop(): Promise<void>;
    /**
     * 注册 importObjects
     * @param objs configuration 中的 importObjects
     * @param namespace namespace
     */
    private registerImportObjects;
    /**
     * 初始化默认需要 bind 到 container 中的基础依赖
     */
    loadDefinitions(): void;
    private loadConfiguration;
    private convertOptionsToDefinition;
    getResolverHandler(): ResolverHandler;
    addDirectoryFilter(directoryFilter: any): void;
    setAttr(key: string, value: any): void;
    getAttr<T>(key: string): T;
}
//# sourceMappingURL=midwayContainer.d.ts.map