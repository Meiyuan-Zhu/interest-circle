import { ManagedResolverFactory } from './managedResolverFactory';
import { MidwayContainer } from './midwayContainer';
import { HandlerFunction, IResolverHandler, IObjectDefinition } from '../interface';
export declare class ResolverHandler implements IResolverHandler {
    private handlerMap;
    private resolverFactory;
    constructor(container: MidwayContainer, factory: ManagedResolverFactory);
    bindCreatedHook(): void;
    /**
     * 创建对象前
     * @param target 当前对象
     * @param constructorArgs 构造参数
     * @param context 上下文
     */
    beforeEachCreated(target: any, constructorArgs: any[], context: any): void;
    /**
     * 创建对象后
     * @param instance 对象
     * @param context 上下文
     * @param definition 定义
     */
    afterEachCreated(instance: any, context: any, definition: IObjectDefinition): void;
    /**
     * binding getter method for decorator
     *
     * @param setterProps
     * @param instance
     * @param getterHandler
     */
    private defineGetterPropertyValue;
    registerHandler(key: string, fn: HandlerFunction): void;
    getHandler(key: string): HandlerFunction;
}
//# sourceMappingURL=resolverHandler.d.ts.map