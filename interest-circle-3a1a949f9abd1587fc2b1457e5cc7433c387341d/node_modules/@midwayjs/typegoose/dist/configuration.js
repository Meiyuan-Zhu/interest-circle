"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypegooseConfiguration = void 0;
const decorator_1 = require("@midwayjs/decorator");
const mongoose = require("@midwayjs/mongoose");
const interface_1 = require("./interface");
const typegoose_1 = require("@typegoose/typegoose");
const mongo = require("mongoose");
let TypegooseConfiguration = class TypegooseConfiguration {
    constructor() {
        this.legacyMode = false;
        this.modelMap = new WeakMap();
    }
    async init() {
        this.app
            .getApplicationContext()
            .registerDataHandler(interface_1.ENTITY_MODEL_KEY, (key) => {
            // return getConnection(key.connectionName).getRepository(key.modelKey);
            return this.modelMap.get(key.modelKey);
        });
    }
    async onReady(container) {
        var _a, _b;
        const connectionFactory = await container.getAsync(mongoose.MongooseConnectionServiceFactory);
        const Models = (0, decorator_1.listModule)(interface_1.ENTITY_MODEL_KEY);
        for (const Model of Models) {
            const metadata = (_a = (0, decorator_1.getClassMetadata)(interface_1.ENTITY_MODEL_KEY, Model)) !== null && _a !== void 0 ? _a : {};
            const connectionName = (_b = metadata.connectionName) !== null && _b !== void 0 ? _b : 'default';
            const conn = connectionFactory.get(connectionName);
            if (conn) {
                const model = (0, typegoose_1.getModelForClass)(Model, { existingConnection: conn });
                this.modelMap.set(Model, model);
            }
            else {
                throw new Error(`connection name ${metadata.connectionName} not found`);
            }
        }
        // 兼容老代码
        if (Models.length === 0 && this.oldMongooseConfig['uri']) {
            this.legacyMode = true;
            await mongo.connect(this.oldMongooseConfig.uri, this.oldMongooseConfig.options);
        }
    }
    async onStop() {
        if (this.legacyMode) {
            await mongo.disconnect();
        }
    }
};
__decorate([
    (0, decorator_1.Config)('mongoose'),
    __metadata("design:type", Object)
], TypegooseConfiguration.prototype, "oldMongooseConfig", void 0);
__decorate([
    (0, decorator_1.App)(),
    __metadata("design:type", Object)
], TypegooseConfiguration.prototype, "app", void 0);
__decorate([
    (0, decorator_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TypegooseConfiguration.prototype, "init", null);
TypegooseConfiguration = __decorate([
    (0, decorator_1.Configuration)({
        namespace: 'typegoose',
        imports: [mongoose],
    })
], TypegooseConfiguration);
exports.TypegooseConfiguration = TypegooseConfiguration;
//# sourceMappingURL=configuration.js.map