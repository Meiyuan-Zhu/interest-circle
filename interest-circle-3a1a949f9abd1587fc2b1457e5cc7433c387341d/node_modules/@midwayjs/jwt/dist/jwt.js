"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtService = void 0;
const core_1 = require("@midwayjs/core");
const crypto_1 = require("crypto");
const jwt = require("jsonwebtoken");
/**
 *
 * @see{@link https://github.com/auth0/node-jsonwebtoken}
 */
let JwtService = class JwtService {
    signSync(payload, secretOrPrivateKey, options) {
        var _a;
        if (!this.isSecret(secretOrPrivateKey)) {
            options = secretOrPrivateKey;
            secretOrPrivateKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPrivateKey) {
            throw new core_1.MidwayCommonError('[midway:jwt] jwt secret should be set');
        }
        options = this.getSignOptions(options);
        return jwt.sign(payload, secretOrPrivateKey, options);
    }
    async sign(payload, secretOrPrivateKey, options) {
        var _a;
        if (!this.isSecret(secretOrPrivateKey)) {
            options = secretOrPrivateKey;
            secretOrPrivateKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPrivateKey) {
            throw new core_1.MidwayCommonError('[midway:jwt] provide the jwt secret please');
        }
        options = this.getSignOptions(options);
        return new Promise((resolve, reject) => {
            jwt.sign(payload, secretOrPrivateKey, options, (err, encoded) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(encoded);
                }
            });
        });
    }
    verifySync(token, secretOrPublicKey, options) {
        var _a;
        if (!this.isSecret(secretOrPublicKey)) {
            options = secretOrPublicKey;
            secretOrPublicKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPublicKey) {
            throw new core_1.MidwayCommonError('[midway:jwt] provide the jwt secret please');
        }
        options = this.getVerifyOptions(options);
        return jwt.verify(token, secretOrPublicKey, options);
    }
    async verify(token, secretOrPublicKey, options) {
        var _a;
        if (!this.isSecret(secretOrPublicKey)) {
            options = secretOrPublicKey;
            secretOrPublicKey = (_a = this.jwtConfig) === null || _a === void 0 ? void 0 : _a.secret;
        }
        if (!secretOrPublicKey) {
            throw new core_1.MidwayCommonError('[midway:jwt] provide the jwt secret please');
        }
        options = this.getVerifyOptions(options);
        return new Promise((resolve, reject) => {
            jwt.verify(token, secretOrPublicKey, options, (err, encoded) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(encoded);
                }
            });
        });
    }
    decode(token, options) {
        return jwt.decode(token, this.getDecodeOptions(options));
    }
    decodeSync(token, options) {
        return this.decode(token, this.getDecodeOptions(options));
    }
    getSignOptions(options) {
        let signOptions = 'sign' in this.jwtConfig ? this.jwtConfig.sign : this.jwtConfig;
        signOptions = Object.assign({}, signOptions, options);
        // delete possible invalid options from jwtConfig
        for (const keyToDelete of ['sign', 'verify', 'decode', 'secret']) {
            delete signOptions[keyToDelete];
        }
        return signOptions;
    }
    getVerifyOptions(options) {
        let verifyOptions = 'verify' in this.jwtConfig ? this.jwtConfig.verify : {};
        verifyOptions = Object.assign({}, verifyOptions, options);
        delete verifyOptions['secret'];
        return verifyOptions;
    }
    getDecodeOptions(options) {
        let decodeOptions = 'decode' in this.jwtConfig ? this.jwtConfig.decode : {};
        decodeOptions = Object.assign({}, decodeOptions, options);
        delete decodeOptions['secret'];
        return decodeOptions;
    }
    isSecret(secret) {
        if (typeof secret === 'string')
            return true;
        if (Buffer.isBuffer(secret))
            return true;
        if (secret instanceof crypto_1.KeyObject)
            return true;
        if (secret &&
            typeof secret === 'object' &&
            'key' in secret &&
            'passphrase' in secret)
            return true;
        return false;
    }
};
__decorate([
    (0, core_1.Config)('jwt'),
    __metadata("design:type", Object)
], JwtService.prototype, "jwtConfig", void 0);
JwtService = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], JwtService);
exports.JwtService = JwtService;
//# sourceMappingURL=jwt.js.map