"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongooseConfiguration = void 0;
const core_1 = require("@midwayjs/core");
const manager_1 = require("./manager");
let MongooseConfiguration = class MongooseConfiguration {
    async onReady(container) {
        this.mongooseDataSourceManager = await container.getAsync(manager_1.MongooseDataSourceManager);
    }
    async onStop(container) {
        await this.mongooseDataSourceManager.stop();
    }
    async onHealthCheck(container) {
        const clientNames = this.mongooseDataSourceManager.getDataSourceNames();
        // find status not ready
        let clientName;
        for (const name of clientNames) {
            if ((await this.mongooseDataSourceManager.isConnected(name)) &&
                !this.mongooseDataSourceManager.isLowPriority(name)) {
                clientName = name;
                break;
            }
        }
        return {
            status: !clientName,
            reason: clientName
                ? `mongoose dataSource "${clientName}" is not ready`
                : '',
        };
    }
};
MongooseConfiguration = __decorate([
    (0, core_1.Configuration)({
        namespace: 'mongoose',
        importConfigs: [
            {
                default: {
                    mongoose: {},
                },
            },
        ],
        importConfigFilter: config => {
            if (config['mongoose']) {
                if (config['mongoose']['client']) {
                    config['mongoose']['dataSource'] =
                        config['mongoose']['dataSource'] || {};
                    config['mongoose']['dataSource']['default'] =
                        config['mongoose']['client'];
                    delete config['mongoose']['client'];
                }
                if (config['mongoose']['clients']) {
                    config['mongoose']['dataSource'] = config['mongoose']['clients'];
                    delete config['mongoose']['clients'];
                }
            }
            return config;
        },
    })
], MongooseConfiguration);
exports.MongooseConfiguration = MongooseConfiguration;
//# sourceMappingURL=configuration.js.map