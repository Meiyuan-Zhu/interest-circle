import { DataSourceManager } from '@midwayjs/core';
import * as mongoose from 'mongoose';
export declare class MongooseDataSourceManager extends DataSourceManager<mongoose.Connection> {
    config: any;
    logger: any;
    baseDir: string;
    init(): Promise<void>;
    protected createDataSource(config: any, name: string): Promise<any>;
    getName(): string;
    destroyDataSource(dataSource: mongoose.Connection): Promise<void>;
    protected checkConnected(dataSource: mongoose.Connection): Promise<boolean>;
}
/**
 * @deprecated
 */
export declare class MongooseConnectionServiceFactory {
    mongooseDataSourceManager: MongooseDataSourceManager;
    createInstance(config: any, clientName: any): Promise<void | mongoose.Connection>;
    get(id: string): mongoose.Connection;
    getName(): string;
    has(id: string): boolean;
}
/**
 * @deprecated
 */
export declare class MongooseConnectionService implements mongoose.Connection {
    private mongooseDataSourceManager;
    private instance;
    init(): Promise<void>;
}
export interface MongooseConnectionService extends mongoose.Connection {
}
//# sourceMappingURL=manager.d.ts.map