import { IMidwayFramework, IMidwayBootstrapOptions, MidwayFrameworkType, IMidwayContainer } from '@midwayjs/core';
import { ILogger } from '@midwayjs/logger';
export declare function isTypeScriptEnvironment(): boolean;
export declare class BootstrapStarter {
    protected appDir: string;
    protected baseDir: string;
    protected bootstrapItems: IMidwayFramework<any, any>[];
    protected globalOptions: Partial<IMidwayBootstrapOptions>;
    protected globalAppMap: Map<MidwayFrameworkType, import("@midwayjs/core").IMidwayBaseApplication<any>>;
    protected globalConfig: any;
    configure(options: IMidwayBootstrapOptions): this;
    load(unit: (globalConfig: unknown) => IMidwayFramework<any, any>): any;
    load(unit: IMidwayFramework<any, any>): any;
    init(): Promise<void>;
    run(): Promise<void>;
    stop(): Promise<void>;
    getActions(action: string, args?: any): any[];
    getFirstActions(action: string, args?: any): Promise<any>;
    getTailActions(action: string, args?: any): any[];
    protected getMainFramework(): IMidwayFramework<any, any>;
    protected refreshBootstrapItems(): void;
    protected getBaseDir(): string;
    getBootstrapAppMap(): Map<MidwayFrameworkType, import("@midwayjs/core").IMidwayBaseApplication<any>>;
}
export declare class Bootstrap {
    static starter: BootstrapStarter;
    static logger: ILogger;
    static configured: boolean;
    static beforeHandler: any;
    /**
     * set global configuration for midway
     * @param configuration
     */
    static configure(configuration?: IMidwayBootstrapOptions): typeof Bootstrap;
    /**
     * load midway framework unit
     * @param unit
     */
    static load(unit: (globalConfig: unknown) => IMidwayFramework<any, any>): any;
    static load(unit: IMidwayFramework<any, any>): any;
    private static getStarter;
    static before(beforeHandler: (container: IMidwayContainer) => void): typeof Bootstrap;
    static run(): Promise<void>;
    static stop(): Promise<void>;
    static reset(): void;
    /**
     * on bootstrap receive a exit signal
     * @param signal
     */
    static onSignal(signal: any): Promise<void>;
    /**
     * on bootstrap process exit
     * @param code
     */
    static onExit(code: any): void;
    static uncaughtExceptionHandler(err: any): void;
    static unhandledRejectionHandler(err: any): void;
}
//# sourceMappingURL=bootstrap.d.ts.map