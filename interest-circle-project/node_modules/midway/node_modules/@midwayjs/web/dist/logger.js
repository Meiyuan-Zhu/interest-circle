"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLoggers = void 0;
const egg_logger_1 = require("egg-logger");
const logger_1 = require("@midwayjs/logger");
const path_1 = require("path");
const fs_1 = require("fs");
const core_1 = require("@midwayjs/core");
const utils_1 = require("./utils");
const os = require("os");
const isWindows = os.platform() === 'win32';
const levelTransform = level => {
    switch (level) {
        case 'NONE':
        case Infinity: // egg logger 的 none 是这个等级
            return null;
        case 0:
        case 'DEBUG':
        case 'debug':
            return 'debug';
        case 1:
        case 'INFO':
        case 'info':
            return 'info';
        case 2:
        case 'WARN':
        case 'warn':
            return 'warn';
        case 3:
        case 'ERROR':
        case 'error':
            return 'error';
        default:
            return 'silly';
    }
};
function isEmptyFile(p) {
    const content = (0, fs_1.readFileSync)(p, {
        encoding: 'utf8',
    });
    return content === null || content === undefined || content === '';
}
function checkEggLoggerExistsAndBackup(dir, fileName) {
    const file = (0, path_1.isAbsolute)(fileName) ? fileName : (0, path_1.join)(dir, fileName);
    if ((0, fs_1.existsSync)(file) && !(0, fs_1.lstatSync)(file).isSymbolicLink()) {
        // 如果是空文件，则直接删了，否则加入备份队列
        if (isEmptyFile(file)) {
            // midway 的软链在 windows 底下也不会创建出来，在 windows 底下就不做文件删除了
            if (!isWindows) {
                (0, fs_1.unlinkSync)(file);
            }
        }
        else {
            const timeFormat = (0, utils_1.getCurrentDateString)();
            (0, fs_1.renameSync)(file, file + '.' + timeFormat + '_eggjs_bak');
        }
    }
}
function removeSymbol(dir, fileName) {
    const file = (0, path_1.isAbsolute)(fileName) ? fileName : (0, path_1.join)(dir, fileName);
    if ((0, fs_1.existsSync)(file) && (0, fs_1.lstatSync)(file).isSymbolicLink()) {
        if (!isWindows) {
            (0, fs_1.unlinkSync)(file);
        }
    }
}
function checkMidwayLoggerSymbolExistsAndRemove(appConfig) {
    removeSymbol(appConfig.logger['dir'], appConfig.logger['appLogName']);
    removeSymbol(appConfig.logger['dir'], appConfig.logger['coreLogName']);
    removeSymbol(appConfig.logger['dir'], appConfig.logger['agentLogName']);
    removeSymbol(appConfig.logger['dir'], appConfig.logger['errorLogName']);
    for (const loggerOption in appConfig['customLogger']) {
        removeSymbol(appConfig.logger['dir'], appConfig['customLogger'][loggerOption].file);
    }
}
class MidwayLoggers extends Map {
    /**
     * @constructor
     * - logger
     *   - {String} env - egg app runtime env string, detail please see `app.config.env`
     *   - {String} type - current process type, `application` or `agent`
     *   - {String} dir - log file dir
     *   - {String} [encoding = utf8] - log string encoding
     *   - {String} [level = INFO] - file log level
     *   - {String} [consoleLevel = NONE] - console log level
     *   - {Boolean} [outputJSON = false] - send JSON log or not
     *   - {Boolean} [buffer = true] - use {@link FileBufferTransport} or not
     *   - {String} appLogName - egg app file logger name
     *   - {String} coreLogName - egg core file logger name
     *   - {String} agentLogName - egg agent file logger name
     *   - {String} errorLogName - err common error logger name
     *   - {String} eol - end of line char
     *   - {String} [concentrateError = duplicate] - whether write error logger to common-error.log, `duplicate` / `redirect` / `ignore`
     * - customLogger
     * @param options
     * @param app
     */
    constructor(options, app) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super();
        // 这么改是为了防止 egg 日志切割时遍历属性，导致报错
        Object.defineProperty(this, 'app', {
            value: app,
            enumerable: false,
        });
        /**
         * 提前备份 egg 日志
         */
        for (const name of [
            options.logger.appLogName,
            options.logger.coreLogName,
            options.logger.agentLogName,
            options.logger.errorLogName,
        ]) {
            checkEggLoggerExistsAndBackup(options.logger.dir, name);
        }
        // 创建标准的日志
        if (this.app.getProcessType() === core_1.MidwayProcessTypeEnum.AGENT) {
            this.createLogger('coreLogger', {
                file: options.logger.agentLogName,
                level: (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.coreLogger) === null || _b === void 0 ? void 0 : _b.level,
                consoleLevel: (_d = (_c = options.logger) === null || _c === void 0 ? void 0 : _c.coreLogger) === null || _d === void 0 ? void 0 : _d.consoleLevel,
            }, options.logger, 'agent:coreLogger');
            this.createLogger('logger', { file: options.logger.appLogName }, options.logger, 'agent:logger');
        }
        else {
            this.createLogger('coreLogger', {
                file: options.logger.coreLogName,
                level: (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.coreLogger) === null || _f === void 0 ? void 0 : _f.level,
                consoleLevel: (_h = (_g = options.logger) === null || _g === void 0 ? void 0 : _g.coreLogger) === null || _h === void 0 ? void 0 : _h.consoleLevel,
            }, options.logger, 'coreLogger');
            this.createLogger('logger', { file: options.logger.appLogName }, options.logger, 'logger');
        }
        if (options.customLogger) {
            for (const loggerKey in options.customLogger) {
                const customLogger = options.customLogger[loggerKey];
                checkEggLoggerExistsAndBackup(customLogger['dir'] || options.logger.dir, customLogger['file']);
                this.createLogger(loggerKey, customLogger, options.logger);
            }
        }
    }
    createLogger(loggerKey, options, defaultLoggerOptions, createLoggerKey) {
        const level = options.level
            ? levelTransform(options.level)
            : levelTransform(defaultLoggerOptions.level);
        const consoleLevel = options.consoleLevel
            ? levelTransform(options.consoleLevel)
            : levelTransform(defaultLoggerOptions.consoleLevel);
        const dir = options['dir'] || defaultLoggerOptions.dir;
        const logger = logger_1.loggers.createLogger(createLoggerKey || loggerKey, {
            dir,
            fileLogName: options.file,
            errorLogName: defaultLoggerOptions.errorLogName,
            level,
            consoleLevel,
            disableFile: level === null,
            disableConsole: consoleLevel === null,
            errorDir: dir,
        });
        // overwrite values for pandora collect
        logger.values = () => {
            return [];
        };
        this[loggerKey] = logger;
        this.set(loggerKey, logger);
        return logger;
    }
    disableConsole() {
        for (const value of this.values()) {
            if (value === null || value === void 0 ? void 0 : value.disableConsole) {
                value === null || value === void 0 ? void 0 : value.disableConsole();
            }
            else if (value.disable) {
                value.disable('console');
            }
        }
    }
    reload() {
        // 忽略 midway logger，只有 egg logger 需要做切割
        for (const value of this.values()) {
            if (value.reload) {
                value.reload();
            }
        }
    }
}
const createLoggers = (app) => {
    const loggerConfig = app.config.logger;
    loggerConfig.type = app.type;
    if (app.config.env === 'prod' &&
        loggerConfig.level === 'DEBUG' &&
        !loggerConfig.allowDebugAtProd) {
        loggerConfig.level = 'INFO';
    }
    let loggers;
    if (app.config.midwayFeature['replaceEggLogger']) {
        loggers = new MidwayLoggers(app.config, app);
    }
    else {
        checkMidwayLoggerSymbolExistsAndRemove(app.config);
        loggers = new egg_logger_1.EggLoggers(app.config);
    }
    // won't print to console after started, except for local and unittest
    app.ready(() => {
        if (loggerConfig.disableConsoleAfterReady) {
            loggers.disableConsole();
        }
    });
    loggers.coreLogger.info('[egg:logger] init all loggers with options: %j', loggerConfig);
    return loggers;
};
exports.createLoggers = createLoggers;
//# sourceMappingURL=logger.js.map