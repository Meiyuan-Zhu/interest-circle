"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayWebFramework = void 0;
const core_1 = require("@midwayjs/core");
const decorator_1 = require("@midwayjs/decorator");
const koa_1 = require("@midwayjs/koa");
const router_1 = require("@eggjs/router");
const logger_1 = require("@midwayjs/logger");
class MidwayWebFramework extends koa_1.MidwayKoaBaseFramework {
    constructor() {
        super(...arguments);
        this.prioritySortRouters = [];
    }
    configure(options) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        this.configurationOptions = options;
        // set default context logger
        this.BaseContextLoggerClass =
            options.ContextLoggerClass || this.getDefaultContextLoggerClass();
        if (options.typescript === false) {
            this.isTsMode = false;
        }
        this.app = options.app;
        this.defineApplicationProperties({
            generateController: (controllerMapping) => {
                return this.generateController(controllerMapping);
            },
            generateMiddleware: async (middlewareId) => {
                return this.generateMiddleware(middlewareId);
            },
            getProcessType: () => {
                if (this.configurationOptions.processType === 'application') {
                    return core_1.MidwayProcessTypeEnum.APPLICATION;
                }
                if (this.configurationOptions.processType === 'agent') {
                    return core_1.MidwayProcessTypeEnum.AGENT;
                }
                // TODO 单进程模式下区分进程类型??
                return core_1.MidwayProcessTypeEnum.APPLICATION;
            },
        }, ['createAnonymousContext']);
        if (this.app.config.midwayFeature['replaceEggLogger']) {
            // if use midway logger will be use midway custom context logger
            this.app.beforeStart(() => {
                this.app.ContextLogger = self.BaseContextLoggerClass;
            });
        }
        Object.defineProperty(this.app, 'applicationContext', {
            get() {
                return self.getApplicationContext();
            },
        });
        return this;
    }
    async initialize(options) {
        this.isMainFramework = options.isMainFramework;
        /**
         * before create MidwayContainer instance，can change init parameters
         */
        await this.beforeContainerInitialize(options);
        /**
         * initialize MidwayContainer instance
         */
        await this.containerInitialize(options);
        /**
         * before container load directory and bind
         */
        await this.afterContainerInitialize(options);
        /**
         * run container loadDirectoryLoad method to create object definition
         */
        await this.containerDirectoryLoad(options);
        /**
         * after container load directory and bind
         */
        await this.afterContainerDirectoryLoad(options);
        /**
         * Third party application initialization
         */
        await this.applicationInitialize(options);
        /**
         * EggJS 比较特殊，生命周期触发需要等到插件加载完才能加载
         */
        await this.applicationContext.ready();
        /**
         * after container refresh
         */
        await this.afterContainerReady(options);
    }
    async beforeContainerInitialize(options) {
        options.ignore = options.ignore || [];
        options.ignore.push('**/app/extend/**');
    }
    async initializeLogger() {
        // 不需要在这里创建框架日志，从 egg 代理过来
        this.logger = this.app.coreLogger;
        this.appLogger = this.app.logger;
    }
    async applicationInitialize(options) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        if (this.isTsMode) {
            process.env.EGG_TYPESCRIPT = 'true';
        }
        if (this.configurationOptions.globalConfig) {
            this.getApplicationContext()
                .getConfigService()
                .addObject(this.configurationOptions.globalConfig);
            Object.defineProperty(this.app, 'config', {
                get() {
                    return self.getConfiguration();
                },
            });
        }
        // register plugin
        this.getApplicationContext().registerDataHandler(decorator_1.PLUGIN_KEY, (key, target) => {
            return this.app[key];
        });
        // register config
        this.getApplicationContext().registerDataHandler(decorator_1.CONFIG_KEY, key => {
            return key ? (0, core_1.safelyGet)(key, this.app.config) : this.app.config;
        });
        // register logger
        this.getApplicationContext().registerDataHandler(decorator_1.LOGGER_KEY, key => {
            return this.getLogger(key);
        });
    }
    async afterContainerReady(options) { }
    getApplication() {
        return this.app;
    }
    getFrameworkType() {
        return core_1.MidwayFrameworkType.WEB;
    }
    getLogger(name) {
        if (name) {
            return this.app.loggers[name] || logger_1.loggers.getLogger(name);
        }
        return this.appLogger;
    }
    /**
     * 这个方法 egg-cluster 不走，只有单进程模式使用 @midwayjs/bootstrap 才会执行
     */
    async run() { }
    /**
     * 这个方法 egg-cluster 不走，只有单进程模式使用 @midwayjs/bootstrap 才会执行
     */
    async beforeStop() { }
    createRouter(routerOptions) {
        const router = new router_1.EggRouter(routerOptions, this.app);
        router.prefix(routerOptions.prefix);
        this.prioritySortRouters.push({
            priority: 0,
            router,
        });
        return router;
    }
    setContextLoggerClass(BaseContextLogger) {
        this.BaseContextLoggerClass = BaseContextLogger;
        this.app.ContextLogger = BaseContextLogger;
    }
}
exports.MidwayWebFramework = MidwayWebFramework;
//# sourceMappingURL=web.js.map