"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayRequestContainer = void 0;
const midwayContainer_1 = require("./midwayContainer");
const interface_1 = require("../interface");
const util_1 = require("../util/");
const decorator_1 = require("@midwayjs/decorator");
class MidwayRequestContainer extends midwayContainer_1.MidwayContainer {
    constructor(ctx, applicationContext) {
        super(null, applicationContext);
        this.applicationContext = applicationContext;
        this.configService = this.applicationContext.getConfigService();
        this.environmentService = this.applicationContext.getEnvironmentService();
        this.aspectService = this.applicationContext.getAspectService();
        this.ctx = ctx;
        // register ctx
        this.registerObject(interface_1.REQUEST_CTX_KEY, ctx);
        if (ctx.logger) {
            // register contextLogger
            this.registerObject('logger', ctx.logger);
        }
        const resolverHandler = this.applicationContext.getResolverHandler();
        this.beforeEachCreated(resolverHandler.beforeEachCreated.bind(resolverHandler));
        this.afterEachCreated(resolverHandler.afterEachCreated.bind(resolverHandler));
    }
    createContainerIdx() {
        // requestContainer id = -1ï¼›
        return -1;
    }
    init() {
        // do nothing
    }
    get(identifier, args) {
        const originIdentifier = identifier;
        if (typeof identifier !== 'string') {
            identifier = this.getIdentifier(identifier);
        }
        if (this.registry.hasObject(identifier)) {
            const ins = this.registry.getObject(identifier);
            return this.aspectService.wrapperAspectToInstance(ins);
        }
        let definition = this.applicationContext.registry.getDefinition(identifier);
        // find uuid
        if (!definition && /:/.test(identifier)) {
            identifier = identifier.replace(/^.*?:/, '');
            definition = this.applicationContext.registry.getDefinition(identifier);
        }
        if (definition) {
            if (definition.isRequestScope() ||
                definition.id === decorator_1.PIPELINE_IDENTIFIER) {
                // create object from applicationContext definition for requestScope
                const ins = this.getManagedResolverFactory().create({
                    definition,
                    args,
                });
                return this.aspectService.wrapperAspectToInstance(ins);
            }
        }
        if (this.parent) {
            return this.parent.get(originIdentifier, args);
        }
    }
    async getAsync(identifier, args) {
        const originIdentifier = identifier;
        if (typeof identifier !== 'string') {
            identifier = this.getIdentifier(identifier);
        }
        identifier = (0, util_1.parsePrefix)(identifier);
        if (this.registry.hasObject(identifier)) {
            const ins = this.registry.getObject(identifier);
            return this.aspectService.wrapperAspectToInstance(ins);
        }
        let definition = this.applicationContext.registry.getDefinition(identifier);
        // find uuid
        if (!definition && /:/.test(identifier)) {
            identifier = identifier.replace(/^.*?:/, '');
            definition = this.applicationContext.registry.getDefinition(identifier);
        }
        if (definition) {
            if (definition.isRequestScope() ||
                definition.id === decorator_1.PIPELINE_IDENTIFIER) {
                // create object from applicationContext definition for requestScope
                const ins = await this.getManagedResolverFactory().createAsync({
                    definition,
                    args,
                });
                return this.aspectService.wrapperAspectToInstance(ins);
            }
        }
        if (this.parent) {
            return this.parent.getAsync(originIdentifier, args);
        }
    }
    async ready() {
        this.readied = true;
        // ignore other things
    }
    getConfigService() {
        return this.configService;
    }
    getEnvironmentService() {
        return this.environmentService;
    }
    getContext() {
        return this.ctx;
    }
}
exports.MidwayRequestContainer = MidwayRequestContainer;
//# sourceMappingURL=requestContainer.js.map