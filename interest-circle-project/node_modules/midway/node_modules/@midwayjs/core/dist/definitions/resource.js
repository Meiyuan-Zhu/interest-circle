"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const url_1 = require("url");
/* tslint:disable:variable-name */
class Resource {
    constructor(baseDir, path) {
        this._baseDir = null;
        this._path = null;
        this.encoding = 'UTF-8';
        this._baseDir = baseDir;
        this._path = path || '.'; // baseDir 目录
    }
    getPath() {
        if (this._baseDir) {
            return (0, path_1.resolve)(this._baseDir, this._path);
        }
        return this._path;
    }
    exists() {
        return (0, fs_1.existsSync)(this.getPath());
    }
    isFile() {
        const stats = (0, fs_1.lstatSync)(this.getPath());
        return stats.isFile();
    }
    isDir() {
        const stats = (0, fs_1.lstatSync)(this.getPath());
        return stats.isDirectory();
    }
    isURL() {
        return this.getPath().indexOf('http') > -1;
    }
    getURL() {
        if (this.isURL()) {
            return new url_1.URL(this._path);
        }
        return null;
    }
    /**
     * 如果是文件则获取当前文件夹路径
     * 如果是文件夹则直接作为路径
     * @param path 相对路径
     */
    createRelative(path) {
        if (this.isFile()) {
            path = (0, path_1.join)((0, path_1.dirname)(this.getPath()), path);
        }
        else {
            path = (0, path_1.join)(this.getPath(), path);
        }
        return new Resource(this._baseDir, path);
    }
    getSubResources() {
        if (this.isDir()) {
            const files = (0, fs_1.readdirSync)(this.getPath());
            const arr = files.map(file => {
                return new Resource(this.getPath(), file);
            });
            return arr;
        }
        return [];
    }
    getContent() {
        if (!this.exists()) {
            throw new Error(`${this.getPath()} not found!`);
        }
        if (!this.isFile()) {
            throw new Error(`${this.getPath()} is not a file!`);
        }
        return (0, fs_1.readFileSync)(this.getPath());
    }
    getContentAsJSON() {
        if (!this.exists()) {
            throw new Error(`${this.getPath()} not found!`);
        }
        if (!this.isFile()) {
            throw new Error(`${this.getPath()} is not a file!`);
        }
        if ((0, path_1.parse)(this.getPath()).ext === '.json') {
            const buf = (0, fs_1.readFileSync)(this.getPath());
            try {
                return JSON.parse(buf.toString());
                // eslint-disable-next-line no-empty
            }
            catch (e) { }
            return {};
        }
        return require(this.getPath());
    }
    get name() {
        if (this.exists()) {
            return (0, path_1.parse)(this.getPath()).name;
        }
        return null;
    }
    get contentLength() {
        if (this.exists()) {
            const buf = (0, fs_1.readFileSync)(this.getPath());
            return buf.length;
        }
        return 0;
    }
    get lastModified() {
        if (this.exists()) {
            const stats = (0, fs_1.lstatSync)(this.getPath());
            return stats.mtime.getTime();
        }
        return 0;
    }
}
exports.Resource = Resource;
/* tslint:enable:variable-name */
//# sourceMappingURL=resource.js.map