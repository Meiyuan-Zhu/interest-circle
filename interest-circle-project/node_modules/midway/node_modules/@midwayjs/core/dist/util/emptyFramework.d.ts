import { BaseFramework } from '../baseFramework';
import { IMidwayBootstrapOptions } from '../interface';
import { MidwayFrameworkType } from '@midwayjs/decorator';
/**
 * 一个不 ready 的空框架
 */
export declare class EmptyFramework extends BaseFramework<any, any, any> {
    logger: {
        info(): void;
        warn(): void;
        error(): void;
        debug(): void;
        write(): void;
    };
    appLogger: {
        info(): void;
        warn(): void;
        error(): void;
        debug(): void;
        write(): void;
    };
    getFrameworkType(): MidwayFrameworkType;
    run(): Promise<void>;
    applicationInitialize(options: IMidwayBootstrapOptions): Promise<void>;
    containerReady(): Promise<void>;
    afterContainerReady(): Promise<void>;
    loadExtension(): Promise<void>;
}
/**
 * 一个只加载配置的框架
 */
export declare class ConfigFramework extends BaseFramework<any, any, any> {
    logger: {
        info(): void;
        warn(): void;
        error(): void;
        debug(): void;
        write(): void;
    };
    appLogger: {
        info(): void;
        warn(): void;
        error(): void;
        debug(): void;
        write(): void;
    };
    getFrameworkType(): MidwayFrameworkType;
    run(): Promise<void>;
    applicationInitialize(options: IMidwayBootstrapOptions): Promise<void>;
    containerReady(): Promise<void>;
    afterContainerReady(): Promise<void>;
    loadExtension(): Promise<void>;
}
/**
 * 一个全量的空框架
 */
export declare class LightFramework extends BaseFramework<any, any, any> {
    getFrameworkType(): MidwayFrameworkType;
    run(): Promise<void>;
    applicationInitialize(options: IMidwayBootstrapOptions): Promise<void>;
}
//# sourceMappingURL=emptyFramework.d.ts.map