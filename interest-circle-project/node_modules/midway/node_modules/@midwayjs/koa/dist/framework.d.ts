/// <reference types="node" />
import { BaseFramework, IMidwayBootstrapOptions, IMidwayContext, MidwayFrameworkType } from '@midwayjs/core';
import { RouterParamValue } from '@midwayjs/decorator';
import { IMidwayKoaApplication, IMidwayKoaApplicationPlus, IMidwayKoaConfigurationOptions, IMidwayKoaContext } from './interface';
import * as Router from '@koa/router';
import type { DefaultState, Middleware } from 'koa';
import { MidwayKoaContextLogger } from './logger';
import { Server } from 'net';
export declare abstract class MidwayKoaBaseFramework<APP extends IMidwayKoaApplicationPlus<CTX>, CTX extends IMidwayContext, OPT> extends BaseFramework<APP, CTX, OPT> {
    app: APP;
    private controllerIds;
    prioritySortRouters: Array<{
        priority: number;
        router: Router;
    }>;
    getApplication(): APP;
    /**
     * wrap controller string to middleware function
     * @param controllerMapping like FooController.index
     * @param routeArgsInfo
     * @param routerResponseData
     */
    generateController(controllerMapping: string, routeArgsInfo?: RouterParamValue[], routerResponseData?: any[]): Middleware<DefaultState, IMidwayKoaContext>;
    generateMiddleware(middlewareId: any): Promise<Middleware<DefaultState, IMidwayKoaContext, any>>;
    loadMidwayController(): Promise<void>;
    protected createRouter(routerOptions: any): Router;
    private handlerWebMiddleware;
    getDefaultContextLoggerClass(): typeof MidwayKoaContextLogger;
}
export declare class MidwayKoaFramework extends MidwayKoaBaseFramework<IMidwayKoaApplication, IMidwayKoaContext, IMidwayKoaConfigurationOptions> {
    private server;
    applicationInitialize(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    run(): Promise<void>;
    beforeStop(): Promise<void>;
    getFrameworkType(): MidwayFrameworkType;
    getFrameworkName(): string;
    getServer(): Server;
}
//# sourceMappingURL=framework.d.ts.map