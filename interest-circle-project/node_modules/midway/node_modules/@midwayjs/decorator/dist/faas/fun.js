"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerlessTrigger = exports.ServerlessFunction = exports.Func = void 0;
const annotation_1 = require("../annotation");
const __1 = require("..");
function Func(funHandler, functionOptions) {
    if (typeof funHandler !== 'string' && functionOptions === undefined) {
        functionOptions = funHandler;
        funHandler = functionOptions.funHandler || '';
    }
    return (...args) => {
        const [target, key, descriptor] = args;
        // If target is function, @Func annotate class
        if (typeof target === 'function') {
            // save target
            (0, __1.saveModule)(__1.FUNC_KEY, target);
            (0, __1.attachClassMetadata)(__1.FUNC_KEY, Object.assign({ funHandler }, functionOptions), target);
            // register data
            (0, annotation_1.Scope)(__1.ScopeEnum.Request)(target);
        }
        else {
            // If target is instance, @Func annotate class member method
            (0, __1.saveModule)(__1.FUNC_KEY, target.constructor);
            (0, __1.attachClassMetadata)(__1.FUNC_KEY, Object.assign({
                funHandler,
                key,
                descriptor,
            }, functionOptions), target.constructor);
        }
    };
}
exports.Func = Func;
function ServerlessFunction(options) {
    return (target, key, descriptor) => {
        (0, __1.savePropertyMetadata)(__1.SERVERLESS_FUNC_KEY, options, target, key);
    };
}
exports.ServerlessFunction = ServerlessFunction;
function ServerlessTrigger(type, metadata = {}) {
    return (target, functionName, descriptor) => {
        var _a, _b;
        if (type === __1.ServerlessTriggerType.HTTP ||
            type === __1.ServerlessTriggerType.API_GATEWAY) {
            metadata['method'] = (_a = metadata['method']) !== null && _a !== void 0 ? _a : 'get';
        }
        metadata['functionName'] =
            (_b = metadata['functionName']) !== null && _b !== void 0 ? _b : (0, __1.getProviderId)(target.constructor).replace(/[:#]/g, '-') +
                '-' +
                functionName;
        (0, __1.saveModule)(__1.FUNC_KEY, target.constructor);
        // new method decorator
        metadata = metadata || {};
        (0, __1.attachClassMetadata)(__1.FUNC_KEY, {
            type,
            methodName: functionName,
            functionName: metadata.functionName,
            metadata,
        }, target.constructor);
    };
}
exports.ServerlessTrigger = ServerlessTrigger;
//# sourceMappingURL=fun.js.map