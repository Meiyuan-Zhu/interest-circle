"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongooseConnectionService = exports.MongooseConnectionServiceFactory = exports.MongooseDataSourceManager = void 0;
const core_1 = require("@midwayjs/core");
const mongoose = require("mongoose");
let MongooseDataSourceManager = class MongooseDataSourceManager extends core_1.DataSourceManager {
    async init() {
        if (this.config.client) {
            this.logger.warn('[midway:mongoose] mongoose.client is deprecated, please use new config format.');
            this.config.dataSource = {
                default: this.config.client,
            };
        }
        if (this.config.clients) {
            this.logger.warn('[midway:mongoose] mongoose.clients is deprecated, please use new config format.');
            this.config.dataSource = this.config.clients;
        }
        await this.initDataSource(this.config, this.baseDir);
    }
    async createDataSource(config, name) {
        const connection = (await mongoose.createConnection(config.uri, config.options));
        connection.on('error', err => {
            err.message = `[midway:mongoose] ${err.message}`;
            this.logger.error(err);
        });
        /* istanbul ignore next */
        connection.on('disconnected', () => {
            this.logger.info(`[midway:mongoose] ${name} disconnected`);
        });
        connection.on('connected', () => {
            this.logger.info(`[midway:mongoose] ${name} connected successfully`);
        });
        /* istanbul ignore next */
        connection.on('reconnected', () => {
            this.logger.info(`[midway:mongoose] ${name} reconnected successfully`);
        });
        if (config.entities) {
            connection.entities = config.entities;
        }
        return connection;
    }
    getName() {
        return 'mongoose';
    }
    async destroyDataSource(dataSource) {
        await dataSource.close();
    }
    async checkConnected(dataSource) {
        return dataSource.readyState === mongoose.ConnectionStates.connected;
    }
};
__decorate([
    (0, core_1.Config)('mongoose'),
    __metadata("design:type", Object)
], MongooseDataSourceManager.prototype, "config", void 0);
__decorate([
    (0, core_1.Logger)('coreLogger'),
    __metadata("design:type", Object)
], MongooseDataSourceManager.prototype, "logger", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", String)
], MongooseDataSourceManager.prototype, "baseDir", void 0);
__decorate([
    (0, core_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MongooseDataSourceManager.prototype, "init", null);
MongooseDataSourceManager = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], MongooseDataSourceManager);
exports.MongooseDataSourceManager = MongooseDataSourceManager;
/**
 * @deprecated
 */
let MongooseConnectionServiceFactory = class MongooseConnectionServiceFactory {
    createInstance(config, clientName) {
        return this.mongooseDataSourceManager.createInstance(config, clientName);
    }
    get(id) {
        return this.mongooseDataSourceManager.getDataSource(id);
    }
    getName() {
        return 'mongoose';
    }
    has(id) {
        return this.mongooseDataSourceManager.hasDataSource(id);
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", MongooseDataSourceManager)
], MongooseConnectionServiceFactory.prototype, "mongooseDataSourceManager", void 0);
MongooseConnectionServiceFactory = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], MongooseConnectionServiceFactory);
exports.MongooseConnectionServiceFactory = MongooseConnectionServiceFactory;
/**
 * @deprecated
 */
let MongooseConnectionService = class MongooseConnectionService {
    async init() {
        this.instance = this.mongooseDataSourceManager.getDataSource('default');
        if (!this.instance) {
            throw new core_1.MidwayCommonError('mongoose default instance not found.');
        }
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", MongooseDataSourceManager)
], MongooseConnectionService.prototype, "mongooseDataSourceManager", void 0);
__decorate([
    (0, core_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MongooseConnectionService.prototype, "init", null);
MongooseConnectionService = __decorate([
    (0, core_1.Provide)(),
    (0, core_1.Scope)(core_1.ScopeEnum.Singleton)
], MongooseConnectionService);
exports.MongooseConnectionService = MongooseConnectionService;
(0, core_1.delegateTargetMethod)(MongooseConnectionService, [
    'close',
    'collection',
    'createCollection',
    'deleteModel',
    'dropCollection',
    'dropDatabase',
    'get',
    'getClient',
    'model',
    'modelNames',
    'openUri',
    'plugin',
    'set',
    'setClient',
    'startSession',
    'transaction',
    'useDb',
    'watch',
]);
(0, core_1.delegateTargetProperties)(MongooseConnectionService, [
    'client',
    'collections',
    'config',
    'db',
    'host',
    'id',
    'models',
    'name',
    'pass',
    'plugins',
    'port',
    'readyState',
    'user',
]);
//# sourceMappingURL=manager.js.map