"use strict";
const decorator_1 = require("@midwayjs/decorator");
const decorator = require("@midwayjs/decorator");
function findProvideId(module) {
    return decorator['getProviderName']
        ? decorator === null || decorator === void 0 ? void 0 : decorator['getProviderName'](module)
        : (0, decorator_1.getProviderId)(module);
}
module.exports = agent => {
    if (!agent.schedule) {
        return;
    }
    const STRATEGY = Object.getOwnPropertySymbols(agent.schedule)[0];
    const STRATEGY_INSTANCE = Object.getOwnPropertySymbols(agent.schedule)[1];
    // ugly!! just support all and worker strategy
    class AllStrategy extends agent['TimerScheduleStrategy'] {
        handler() {
            this.sendAll();
        }
        safeTimeout(...args) {
            this.timer = super.safeTimeout(...args);
            return this.timer;
        }
        close() {
            clearTimeout(this.timer);
        }
    }
    class WorkerStrategy extends agent['TimerScheduleStrategy'] {
        handler() {
            this.sendOne();
        }
        safeTimeout(...args) {
            this.timer = super.safeTimeout(...args);
            return this.timer;
        }
        close() {
            clearTimeout(this.timer);
        }
    }
    agent.schedule.close = () => {
        agent.schedule.closed = true;
        for (const instance of agent.schedule[STRATEGY_INSTANCE].values()) {
            instance.close();
        }
    };
    const strategyMap = agent.schedule[STRATEGY];
    strategyMap.set('worker', WorkerStrategy);
    strategyMap.set('all', AllStrategy);
    agent.messenger.once('egg-ready', () => {
        const schedules = (0, decorator_1.listModule)(decorator_1.SCHEDULE_KEY);
        for (const scheduleModule of schedules) {
            const provideId = findProvideId(scheduleModule);
            const opts = (0, decorator_1.getClassMetadata)(decorator_1.SCHEDULE_KEY, scheduleModule);
            const type = opts.type;
            if (opts.disable) {
                continue;
            }
            const key = provideId + '#' + scheduleModule.name;
            const Strategy = strategyMap.get(type);
            if (!Strategy) {
                const err = new Error(`schedule type [${type}] is not defined`);
                err.name = 'MidwayScheduleError';
                throw err;
            }
            const instance = new Strategy(opts, agent, key);
            agent.schedule[STRATEGY_INSTANCE].set(key, instance);
            instance.start();
        }
    });
};
//# sourceMappingURL=agent.js.map