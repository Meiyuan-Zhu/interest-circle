"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongooseConnectionService = exports.MongooseConnectionServiceFactory = void 0;
const core_1 = require("@midwayjs/core");
const decorator_1 = require("@midwayjs/decorator");
const mongoose = require("mongoose");
let MongooseConnectionServiceFactory = class MongooseConnectionServiceFactory extends core_1.ServiceFactory {
    async init() {
        await this.initClients(this.config);
    }
    async createClient(config, name) {
        const connection = await mongoose.createConnection(config.uri, config.options);
        connection.on('error', err => {
            err.message = `[mongoose]${err.message}`;
            this.logger.error(err);
        });
        /* istanbul ignore next */
        connection.on('disconnected', () => {
            this.logger.info(`[mongoose] ${name} disconnected`);
        });
        connection.on('connected', () => {
            this.logger.info(`[mongoose] ${name} connected successfully`);
        });
        /* istanbul ignore next */
        connection.on('reconnected', () => {
            this.logger.info(`[mongoose] ${name} reconnected successfully`);
        });
        return connection;
    }
    getName() {
        return 'mongoose';
    }
    async destroyClient(connection) {
        await connection.close();
    }
};
__decorate([
    (0, decorator_1.Config)('mongoose'),
    __metadata("design:type", Object)
], MongooseConnectionServiceFactory.prototype, "config", void 0);
__decorate([
    (0, decorator_1.Logger)('coreLogger'),
    __metadata("design:type", Object)
], MongooseConnectionServiceFactory.prototype, "logger", void 0);
__decorate([
    (0, decorator_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MongooseConnectionServiceFactory.prototype, "init", null);
MongooseConnectionServiceFactory = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Scope)(core_1.ScopeEnum.Singleton)
], MongooseConnectionServiceFactory);
exports.MongooseConnectionServiceFactory = MongooseConnectionServiceFactory;
let MongooseConnectionService = class MongooseConnectionService {
    async init() {
        this.instance = this.serviceFactory.get('default');
    }
};
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", MongooseConnectionServiceFactory)
], MongooseConnectionService.prototype, "serviceFactory", void 0);
__decorate([
    (0, decorator_1.Init)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MongooseConnectionService.prototype, "init", null);
MongooseConnectionService = __decorate([
    (0, decorator_1.Provide)(),
    (0, decorator_1.Scope)(core_1.ScopeEnum.Singleton)
], MongooseConnectionService);
exports.MongooseConnectionService = MongooseConnectionService;
(0, core_1.delegateTargetMethod)(MongooseConnectionService, [
    'close',
    'collection',
    'createCollection',
    'deleteModel',
    'dropCollection',
    'dropDatabase',
    'get',
    'getClient',
    'model',
    'modelNames',
    'openUri',
    'plugin',
    'set',
    'setClient',
    'startSession',
    'transaction',
    'useDb',
    'watch',
]);
(0, core_1.delegateTargetProperties)(MongooseConnectionService, [
    'client',
    'collections',
    'config',
    'db',
    'host',
    'id',
    'models',
    'name',
    'pass',
    'plugins',
    'port',
    'readyState',
    'user',
]);
//# sourceMappingURL=manager.js.map