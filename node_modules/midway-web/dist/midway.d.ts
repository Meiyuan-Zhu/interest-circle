import { Logger } from 'egg-logger';
import { IMidwayCoreApplication, MidwayProcessTypeEnum } from '@midwayjs/core';
declare const MidwayApplication_base: new (...x: any[]) => any;
declare class MidwayApplication extends MidwayApplication_base implements IMidwayCoreApplication {
    Router: any;
    getConfig(key?: any): any;
    get enablePlugins(): any;
    getLogger(name?: any): any;
    getPlugin(pluginName: any): any;
    getPluginContext(): any;
    getApplicationContext(): import("@midwayjs/core").MidwayContainer;
    generateController(controllerMapping: string): import("@midwayjs/decorator").KoaMiddleware<import("egg").Context>;
    /**
     * The current code base directory of application
     * in typescript mode is include src
     * @member {String}
     */
    get baseDir(): string;
    /**
     * The current directory of application
     * @member {String}
     */
    get appDir(): string;
    /**
     * get application context
     */
    get applicationContext(): any;
    /**
     * get plugin context
     */
    get pluginContext(): any;
    dumpConfig(): void;
    getBaseDir(): string;
    getAppDir(): string;
    getEnv(): string;
    getMidwayType(): string;
    getProcessType(): MidwayProcessTypeEnum;
}
declare const MidwayAgent_base: new (...x: any[]) => any;
declare class MidwayAgent extends MidwayAgent_base implements IMidwayCoreApplication {
    getConfig(key?: any): any;
    getLogger(name?: any): Logger;
    getPlugin(pluginName: any): any;
    getPluginContext(): any;
    getApplicationContext(): import("@midwayjs/core").MidwayContainer;
    /**
     * The current code base directory of application
     * in typescript mode is include src
     * @member {String}
     */
    get baseDir(): string;
    /**
     * The current directory of application
     * @member {String}
     */
    get appDir(): string;
    /**
     * get application context
     */
    get applicationContext(): any;
    /**
     * get plugin context
     */
    get pluginContext(): any;
    dumpConfig(): void;
    getBaseDir(): string;
    getAppDir(): string;
    getEnv(): string;
    getMidwayType(): string;
    getProcessType(): MidwayProcessTypeEnum;
}
export { MidwayApplication as Application, MidwayAgent as Agent };
