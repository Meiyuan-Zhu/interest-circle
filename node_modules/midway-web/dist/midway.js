"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const egg_1 = require("egg");
const loader_1 = require("./loader/loader");
const fs = require("fs");
const path = require("path");
const router_1 = require("@eggjs/router");
const core_1 = require("@midwayjs/core");
const MIDWAY_PATH = path.dirname(__dirname);
class MidwayApplication extends egg_1.Application {
    constructor() {
        super(...arguments);
        this.Router = router_1.EggRouter;
    }
    get [Symbol.for('egg#loader')]() {
        return loader_1.AppWorkerLoader;
    }
    get [Symbol.for('egg#eggPath')]() {
        return MIDWAY_PATH;
    }
    getConfig(key) {
        return key ? this.config[key] : this.config;
    }
    get enablePlugins() {
        return this.plugins;
    }
    getLogger(name) {
        return name ? this.loggers[name] : this.logger;
    }
    getPlugin(pluginName) {
        return this.getPluginContext().get(pluginName);
    }
    getPluginContext() {
        return this.loader.pluginContext;
    }
    getApplicationContext() {
        return this.loader.applicationContext;
    }
    generateController(controllerMapping) {
        return this.loader.generateController(controllerMapping);
    }
    /**
     * The current code base directory of application
     * in typescript mode is include src
     * @member {String}
     */
    get baseDir() {
        return this.loader.baseDir;
    }
    /**
     * The current directory of application
     * @member {String}
     */
    get appDir() {
        return this.loader.appDir;
    }
    /**
     * get application context
     */
    get applicationContext() {
        return this.loader.applicationContext;
    }
    /**
     * get plugin context
     */
    get pluginContext() {
        return this.loader.pluginContext;
    }
    dumpConfig() {
        super.dumpConfig();
        const rundir = this.config.rundir;
        try {
            const tree = this.loader.dumpDependency();
            const dumpFile = path.join(rundir, `${this.type}_dependency_${process.pid}`);
            fs.writeFileSync(dumpFile, tree);
        }
        catch (err) {
            this.coreLogger.warn(`dump dependency dot error: ${err.message}`);
        }
        // dump routers to router.json
        try {
            const dumpRouterFile = path.join(rundir, 'midway-router.json');
            const routers = [];
            for (const router of this.loader.prioritySortRouters) {
                for (const layer of router['router'].stack) {
                    routers.push({
                        name: layer.name,
                        methods: layer.methods,
                        paramNames: layer.paramNames,
                        path: layer.path,
                        regexp: layer.regexp.toString(),
                        stack: layer.stack.map(stack => stack._name || stack.name || 'anonymous'),
                    });
                }
            }
            fs.writeFileSync(dumpRouterFile, JSON.stringify(routers, null, 2));
        }
        catch (err) {
            this.coreLogger.warn(`dumpConfig midway-router.json error: ${err.message}`);
        }
    }
    getBaseDir() {
        return this.baseDir;
    }
    getAppDir() {
        return this.appDir;
    }
    getEnv() {
        return this.config.env;
    }
    getMidwayType() {
        return 'MIDWAY_EGG';
    }
    getProcessType() {
        return core_1.MidwayProcessTypeEnum.APPLICATION;
    }
}
exports.Application = MidwayApplication;
class MidwayAgent extends egg_1.Agent {
    get [Symbol.for('egg#loader')]() {
        return loader_1.AgentWorkerLoader;
    }
    get [Symbol.for('egg#eggPath')]() {
        return MIDWAY_PATH;
    }
    getConfig(key) {
        return key ? this.config[key] : this.config;
    }
    getLogger(name) {
        return name ? this.loggers[name] : this.logger;
    }
    getPlugin(pluginName) {
        return this.getPluginContext().get(pluginName);
    }
    getPluginContext() {
        return this.loader.pluginContext;
    }
    getApplicationContext() {
        return this.loader.applicationContext;
    }
    /**
     * The current code base directory of application
     * in typescript mode is include src
     * @member {String}
     */
    get baseDir() {
        return this.loader.baseDir;
    }
    /**
     * The current directory of application
     * @member {String}
     */
    get appDir() {
        return this.loader.appDir;
    }
    /**
     * get application context
     */
    get applicationContext() {
        return this.loader.applicationContext;
    }
    /**
     * get plugin context
     */
    get pluginContext() {
        return this.loader.pluginContext;
    }
    dumpConfig() {
        super.dumpConfig();
        try {
            const tree = this.loader.dumpDependency();
            const rundir = this.config.rundir;
            const dumpFile = path.join(rundir, `${this.type}_dependency_${process.pid}`);
            fs.writeFileSync(dumpFile, tree);
        }
        catch (err) {
            this.coreLogger.warn(`dump dependency dot error: ${err.message}`);
        }
    }
    getBaseDir() {
        return this.baseDir;
    }
    getAppDir() {
        return this.appDir;
    }
    getEnv() {
        return this.config.env;
    }
    getMidwayType() {
        return 'MIDWAY_EGG';
    }
    getProcessType() {
        return core_1.MidwayProcessTypeEnum.AGENT;
    }
}
exports.Agent = MidwayAgent;
//# sourceMappingURL=midway.js.map