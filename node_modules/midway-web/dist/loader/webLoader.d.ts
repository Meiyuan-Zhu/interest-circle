import { EggRouter as Router } from '@eggjs/router';
import { RouterParamValue } from '@midwayjs/decorator';
import { EggAppInfo } from 'egg';
import { MidwayContainer } from '@midwayjs/core';
import { Middleware, MidwayLoaderOptions } from '../interface';
declare const EggLoader: any;
export declare class MidwayWebLoader extends EggLoader {
    baseDir: string;
    appDir: string;
    appInfo: EggAppInfo;
    private controllerIds;
    prioritySortRouters: Array<{
        priority: number;
        router: Router;
    }>;
    private containerLoader;
    constructor(options: MidwayLoaderOptions);
    /**
     * 判断是否是 ts 模式，在构造器内就会被执行
     */
    get isTsMode(): boolean;
    get applicationContext(): MidwayContainer;
    get pluginContext(): any;
    loadApplicationContext(): void;
    protected loadConfig(): void;
    protected getPluginPath(plugin: any): string;
    protected registerTypescriptDirectory(): void;
    protected getEggPaths(): string[];
    protected getServerEnv(): string;
    protected getAppInfo(): EggAppInfo;
    protected preRegisterRouter(target: any, controllerId: string): Promise<void>;
    private handlerWebMiddleware;
    /**
     * @param controllerOption
     */
    private createEggRouter;
    protected refreshContext(): Promise<void>;
    protected onClose(): Promise<void>;
    /**
     * wrap controller string to middleware function
     * @param controllerMapping like FooController.index
     */
    generateController(controllerMapping: string, routeArgsInfo?: RouterParamValue[]): Middleware;
    loadMidwayController(): Promise<void>;
    dumpDependency(): any;
}
export {};
