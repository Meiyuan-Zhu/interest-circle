import 'reflect-metadata';
import { ObjectDefinitionOptions, ObjectIdentifier, TagPropsMetadata } from '../interface';
export type DecoratorKey = string | symbol;
export declare const PRELOAD_MODULE_KEY = "INJECTION_PRELOAD_MODULE_KEY";
export declare const INJECT_CLASS_KEY_PREFIX = "INJECTION_CLASS_META_DATA";
export declare class DecoratorManager extends Map {
    /**
     * the key for meta data store in class
     */
    injectClassKeyPrefix: string;
    /**
     * the key for method meta data store in class
     */
    injectClassMethodKeyPrefix: string;
    /**
     * the key for method meta data store in method
     */
    injectMethodKeyPrefix: string;
    saveModule(key: any, module: any): void;
    resetModule(key: any): void;
    static getDecoratorClassKey(decoratorNameKey: DecoratorKey): string;
    static removeDecoratorClassKeySuffix(decoratorNameKey: DecoratorKey): string;
    static getDecoratorMethodKey(decoratorNameKey: DecoratorKey): string;
    static getDecoratorClsExtendedKey(decoratorNameKey: DecoratorKey): string;
    static getDecoratorClsMethodPrefix(decoratorNameKey: DecoratorKey): string;
    static getDecoratorClsMethodKey(decoratorNameKey: DecoratorKey, methodKey: DecoratorKey): string;
    static getDecoratorMethod(decoratorNameKey: DecoratorKey, methodKey: DecoratorKey): string;
    listModule(key: any): unknown[];
    static saveMetadata(metaKey: string, target: any, dataKey: string, data: any): void;
    static attachMetadata(metaKey: string, target: any, dataKey: string, data: any, groupBy?: string): void;
    static getMetadata(metaKey: string, target: any, dataKey?: string): any;
    /**
     * save meta data to class or property
     * @param decoratorNameKey the alias name for decorator
     * @param data the data you want to store
     * @param target target class
     * @param propertyName
     */
    saveMetadata(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName?: any): void;
    /**
     * attach data to class or property
     * @param decoratorNameKey
     * @param data
     * @param target
     * @param propertyName
     */
    attachMetadata(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName?: string, groupBy?: string): void;
    /**
     * get single data from class or property
     * @param decoratorNameKey
     * @param target
     * @param propertyName
     */
    getMetadata(decoratorNameKey: DecoratorKey, target: any, propertyName?: any): any;
    /**
     * save property data to class
     * @param decoratorNameKey
     * @param data
     * @param target
     * @param propertyName
     */
    savePropertyDataToClass(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName: any): void;
    /**
     * attach property data to class
     * @param decoratorNameKey
     * @param data
     * @param target
     * @param propertyName
     * @param groupBy
     */
    attachPropertyDataToClass(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName: any, groupBy?: string): void;
    /**
     * get property data from class
     * @param decoratorNameKey
     * @param target
     * @param propertyName
     */
    getPropertyDataFromClass(decoratorNameKey: DecoratorKey, target: any, propertyName: any): any;
    /**
     * list property data from class
     * @param decoratorNameKey
     * @param target
     */
    listPropertyDataFromClass(decoratorNameKey: DecoratorKey, target: any): any[];
}
/**
 * save data to class
 * @param decoratorNameKey
 * @param data
 * @param target
 */
export declare function saveClassMetadata(decoratorNameKey: DecoratorKey, data: any, target: any): void;
/**
 * attach data to class
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param groupBy
 */
export declare function attachClassMetadata(decoratorNameKey: DecoratorKey, data: any, target: any, groupBy?: string): void;
/**
 * get data from class assign
 * @param decoratorNameKey
 * @param target
 */
export declare function getClassExtendedMetadata(decoratorNameKey: DecoratorKey, target: any): any;
/**
 * get data from class
 * @param decoratorNameKey
 * @param target
 */
export declare function getClassMetadata(decoratorNameKey: DecoratorKey, target: any): any;
export declare function throwErrorForTest(key: DecoratorKey, e: Error): void;
/**
 * this method has deprecated and use savePropertyDataToClass instead
 *
 * @deprecated
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param method
 */
export declare function saveMethodDataToClass(decoratorNameKey: DecoratorKey, data: any, target: any, method: any): void;
/**
 * this method has deprecated and use attachPropertyDataToClass instead
 *
 * @deprecated
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param method
 */
export declare function attachMethodDataToClass(decoratorNameKey: DecoratorKey, data: any, target: any, method: any): void;
/**
 * this method has deprecated and use getPropertyDataFromClass instead
 *
 * @deprecated
 * @param decoratorNameKey
 * @param target
 * @param method
 */
export declare function getMethodDataFromClass(decoratorNameKey: DecoratorKey, target: any, method: any): any;
/**
 * list method data from class
 * @deprecated
 * @param decoratorNameKey
 * @param target
 */
export declare function listMethodDataFromClass(decoratorNameKey: DecoratorKey, target: any): any[];
/**
 * save method data
 * @deprecated
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param method
 */
export declare function saveMethodMetadata(decoratorNameKey: DecoratorKey, data: any, target: any, method: any): void;
/**
 * attach method data
 * @deprecated
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param method
 */
export declare function attachMethodMetadata(decoratorNameKey: DecoratorKey, data: any, target: any, method: any): void;
/**
 * get method data
 * @deprecated
 * @param decoratorNameKey
 * @param target
 * @param method
 */
export declare function getMethodMetadata(decoratorNameKey: DecoratorKey, target: any, method: any): any;
/**
 * save property data to class
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param propertyName
 */
export declare function savePropertyDataToClass(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName: any): void;
/**
 * attach property data to class
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param propertyName
 * @param groupBy
 */
export declare function attachPropertyDataToClass(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName: any, groupBy?: string): void;
/**
 * get property data from class
 * @param decoratorNameKey
 * @param target
 * @param propertyName
 */
export declare function getPropertyDataFromClass(decoratorNameKey: DecoratorKey, target: any, propertyName: any): any;
/**
 * list property data from class
 * @param decoratorNameKey
 * @param target
 */
export declare function listPropertyDataFromClass(decoratorNameKey: DecoratorKey, target: any): any[];
/**
 * save property data
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param propertyName
 */
export declare function savePropertyMetadata(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName: any): void;
/**
 * attach property data
 * @param decoratorNameKey
 * @param data
 * @param target
 * @param propertyName
 */
export declare function attachPropertyMetadata(decoratorNameKey: DecoratorKey, data: any, target: any, propertyName: any): void;
/**
 * get property data
 * @param decoratorNameKey
 * @param target
 * @param propertyName
 */
export declare function getPropertyMetadata(decoratorNameKey: DecoratorKey, target: any, propertyName: any): any;
/**
 * save preload module by target
 * @param target
 */
export declare function savePreloadModule(target: any): void;
/**
 * list preload module
 */
export declare function listPreloadModule(): any[];
/**
 * save module to inner map
 * @param decoratorNameKey
 * @param target
 */
export declare function saveModule(decoratorNameKey: DecoratorKey, target: any): void;
/**
 * list module from decorator key
 * @param decoratorNameKey
 */
export declare function listModule(decoratorNameKey: DecoratorKey, filter?: (module: any) => boolean): any[];
/**
 * reset module
 * @param decoratorNameKey
 */
export declare function resetModule(decoratorNameKey: DecoratorKey): void;
/**
 * clear all module
 */
export declare function clearAllModule(): void;
/**
 * get provider id from module
 * @param module
 */
export declare function getProviderId(module: any): string;
/**
 * 生成带 namespace 的 provideId
 * @param provideId provideId
 * @param namespace namespace
 */
export declare function generateProvideId(provideId: string, namespace?: string): string;
/**
 * get object definition metadata
 * @param module
 */
export declare function getObjectDefinition(module: any): ObjectDefinitionOptions;
export interface TSDesignType {
    name: string;
    originDesign: any;
    isBaseType: boolean;
}
/**
 * get parameters type by reflect-metadata
 */
export declare function getMethodParamTypes(target: any, propertyKey: string | symbol): any;
export declare function getPropertyType(target: any, propertyKey: string | symbol): TSDesignType;
export declare function getMethodReturnTypes(target: any, propertyKey: string | symbol): any;
export declare function attachConstructorDataOnClass(identifier: any, clz: any, type: any, index: any): void;
interface InjectOptions {
    identifier: ObjectIdentifier;
    target: any;
    targetKey: string;
    index?: number;
    args?: any;
}
/**
 * 构造器注入
 * @param opts 参数
 */
export declare function saveConstructorInject(opts: InjectOptions): void;
export declare function getConstructorInject(target: any): TagPropsMetadata[];
/**
 * 属性注入
 * @param opts 参数
 */
export declare function savePropertyInject(opts: InjectOptions): void;
export declare function getPropertyInject(target: any): TagPropsMetadata[];
/**
 * class 元数据定义
 * @param target class
 * @param props 属性
 */
export declare function saveObjectDefProps(target: any, props?: {}): any;
export declare function getObjectDefProps(target: any): ObjectDefinitionOptions;
/**
 * class provider id
 * @param identifier id
 * @param target class
 * @param override 是否覆盖
 */
export declare function saveProviderId(identifier: ObjectIdentifier, target: any, override?: boolean): any;
/**
 * 是否使用了 saveProviderId
 * @param target class
 */
export declare function isProvide(target: any): boolean;
export declare function getProviderUUId(module: any): string;
export {};
//# sourceMappingURL=decoratorManager.d.ts.map