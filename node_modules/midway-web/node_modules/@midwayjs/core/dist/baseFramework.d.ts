import { IConfigurationOptions, IMidwayApplication, IMidwayBootstrapOptions, IMidwayContainer, IMidwayContext, IMidwayFramework } from './interface';
import { MidwayFrameworkType } from '@midwayjs/decorator';
import { ILogger, LoggerOptions } from '@midwayjs/logger';
export declare abstract class BaseFramework<APP extends IMidwayApplication<CTX>, CTX extends IMidwayContext, OPT extends IConfigurationOptions> implements IMidwayFramework<APP, OPT> {
    protected isTsMode: boolean;
    protected applicationContext: IMidwayContainer;
    protected logger: ILogger;
    protected appLogger: ILogger;
    configurationOptions: OPT;
    app: APP;
    protected defaultContext: {};
    protected BaseContextLoggerClass: any;
    protected isMainFramework: boolean;
    configure(options?: OPT): BaseFramework<APP, CTX, OPT>;
    initialize(options: IMidwayBootstrapOptions): Promise<void>;
    protected initializeInfo(options: IMidwayBootstrapOptions): Promise<void>;
    protected initializeLogger(options: IMidwayBootstrapOptions): Promise<void>;
    protected containerInitialize(options: IMidwayBootstrapOptions): Promise<void>;
    protected containerDirectoryLoad(options: IMidwayBootstrapOptions): Promise<void>;
    protected containerReady(options: IMidwayBootstrapOptions): Promise<void>;
    loadExtension(): Promise<void>;
    protected containerStop(): Promise<void>;
    getApplicationContext(): IMidwayContainer;
    getConfiguration(key?: string): any;
    getCurrentEnvironment(): string;
    getApplication(): APP;
    abstract applicationInitialize(options: IMidwayBootstrapOptions): any;
    abstract getFrameworkType(): MidwayFrameworkType;
    abstract run(): Promise<void>;
    protected setContextLoggerClass(BaseContextLogger: any): void;
    protected createContextLogger(ctx: CTX, name?: string): ILogger;
    stop(): Promise<void>;
    getAppDir(): string;
    getBaseDir(): string;
    protected defineApplicationProperties(applicationProperties?: {}, whiteList?: string[]): void;
    protected beforeStop(): Promise<void>;
    protected beforeContainerInitialize(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    protected afterContainerInitialize(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    protected afterContainerDirectoryLoad(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    protected afterContainerReady(options: Partial<IMidwayBootstrapOptions>): Promise<void>;
    loadLifeCycles(isForce?: boolean): Promise<void>;
    protected stopLifeCycles(): Promise<void>;
    /**
     * load preload module for container
     * @private
     */
    protected loadPreloadModule(): Promise<void>;
    getLogger(name?: string): ILogger;
    getCoreLogger(): ILogger;
    createLogger(name: string, option?: LoggerOptions): ILogger;
    getProjectName(): any;
    getFrameworkName(): string;
    getDefaultContextLoggerClass(): any;
}
//# sourceMappingURL=baseFramework.d.ts.map