"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseFramework = void 0;
const interface_1 = require("./interface");
const midwayContainer_1 = require("./context/midwayContainer");
const decorator_1 = require("@midwayjs/decorator");
const logger_1 = require("@midwayjs/logger");
const path_1 = require("path");
const logger_2 = require("./logger");
const requestContainer_1 = require("./context/requestContainer");
const configuration_1 = require("./functional/configuration");
const informationService_1 = require("./service/informationService");
function buildLoadDir(baseDir, dir) {
    if (!(0, path_1.isAbsolute)(dir)) {
        return (0, path_1.join)(baseDir, dir);
    }
    return dir;
}
function setupAppDir(baseDir) {
    return (0, path_1.dirname)(baseDir);
}
class BaseFramework {
    constructor() {
        this.isTsMode = true;
        this.defaultContext = {};
    }
    configure(options) {
        this.configurationOptions = options || {};
        this.BaseContextLoggerClass =
            this.configurationOptions.ContextLoggerClass ||
                this.getDefaultContextLoggerClass();
        this.logger = this.configurationOptions.logger;
        this.appLogger = this.configurationOptions.appLogger;
        return this;
    }
    async initialize(options) {
        this.isMainFramework = options.isMainFramework;
        /**
         * before create MidwayContainer instance，can change init parameters
         */
        await this.beforeContainerInitialize(options);
        /**
         * initialize MidwayContainer instance
         */
        await this.containerInitialize(options);
        /**
         * before container load directory and bind
         */
        await this.afterContainerInitialize(options);
        /**
         * run container loadDirectoryLoad method to create object definition
         */
        await this.containerDirectoryLoad(options);
        /**
         * after container load directory and bind
         */
        await this.afterContainerDirectoryLoad(options);
        /**
         * Third party application initialization
         */
        await this.applicationInitialize(options);
        /**
         * start to load configuration and lifeCycle
         */
        await this.containerReady(options);
        if (this.isMainFramework !== undefined) {
            // 多框架场景，由 bootstrap 执行后续流程
            return;
        }
        /**
         * load extensions and lifeCycle
         */
        await this.loadExtension();
        /**
         * after container refresh
         */
        await this.afterContainerReady(options);
    }
    async initializeInfo(options) {
        if (!this.applicationContext.getInformationService()) {
            const informationService = new informationService_1.MidwayInformationService(options);
            this.applicationContext.setInformationService(informationService);
        }
    }
    async initializeLogger(options) {
        if (!this.logger) {
            this.logger = new Proxy((0, logger_2.createMidwayLogger)(this, 'coreLogger'), {});
            this.logger.updateDefaultLabel(this.getFrameworkName());
        }
        if (!this.appLogger) {
            this.appLogger = (0, logger_2.createMidwayLogger)(this, 'logger', {
                fileLogName: 'midway-app.log',
            });
        }
    }
    async containerInitialize(options) {
        if (!options.appDir) {
            options.appDir = setupAppDir(options.baseDir);
        }
        /**
         * initialize container
         */
        if (options.applicationContext) {
            this.applicationContext = options.applicationContext;
        }
        else {
            this.applicationContext = new midwayContainer_1.MidwayContainer(options.baseDir, undefined);
            this.applicationContext.registerObject('baseDir', options.baseDir);
            this.applicationContext.registerObject('appDir', options.appDir);
            this.applicationContext.registerObject('isTsMode', this.isTsMode);
        }
        /**
         * initialize base information
         */
        await this.initializeInfo(options);
        /**
         * initialize framework logger
         */
        await this.initializeLogger(options);
    }
    async containerDirectoryLoad(options) {
        if (options.applicationContext) {
            // 如果有传入全局容器，就不需要再次扫描了
            return;
        }
        /**
         * load directory and bind files to ioc container
         */
        if (!this.isTsMode && options.disableAutoLoad === undefined) {
            // disable auto load in js mode by default
            options.disableAutoLoad = true;
        }
        if (options.disableAutoLoad)
            return;
        // use baseDir in parameter first
        const defaultLoadDir = this.isTsMode ? [options.baseDir] : [];
        this.applicationContext.load({
            loadDir: (options.loadDir || defaultLoadDir).map(dir => {
                return buildLoadDir(options.baseDir, dir);
            }),
            pattern: options.pattern,
            ignore: options.ignore,
        });
        if (options.preloadModules && options.preloadModules.length) {
            for (const preloadModule of options.preloadModules) {
                this.applicationContext.bindClass(preloadModule);
            }
        }
        // register app
        this.applicationContext.registerDataHandler(decorator_1.APPLICATION_KEY, (key, meta) => {
            var _a;
            if (options.globalApplicationHandler) {
                return ((_a = options.globalApplicationHandler(meta === null || meta === void 0 ? void 0 : meta.type)) !== null && _a !== void 0 ? _a : this.getApplication());
            }
            else {
                return this.getApplication();
            }
        });
        // register logger
        this.getApplicationContext().registerDataHandler(decorator_1.LOGGER_KEY, key => {
            return this.getLogger(key);
        });
    }
    async containerReady(options) {
        if (!this.app.getApplicationContext) {
            this.defineApplicationProperties();
        }
        await this.applicationContext.ready();
    }
    async loadExtension() {
        // 切面支持
        await this.applicationContext.getAspectService().loadAspect();
        // 预加载模块支持
        await this.loadPreloadModule();
        // lifecycle 支持
        await this.loadLifeCycles();
    }
    async containerStop() {
        await this.applicationContext.stop();
    }
    getApplicationContext() {
        return this.applicationContext;
    }
    getConfiguration(key) {
        return this.getApplicationContext()
            .getConfigService()
            .getConfiguration(key);
    }
    getCurrentEnvironment() {
        return this.getApplicationContext()
            .getEnvironmentService()
            .getCurrentEnvironment();
    }
    getApplication() {
        return this.app;
    }
    setContextLoggerClass(BaseContextLogger) {
        this.BaseContextLoggerClass = BaseContextLogger;
    }
    createContextLogger(ctx, name) {
        const appLogger = this.getLogger(name);
        return new this.BaseContextLoggerClass(ctx, appLogger);
    }
    async stop() {
        await this.beforeStop();
        if (this.isMainFramework === true || this.isMainFramework === undefined) {
            await this.stopLifeCycles();
            await this.containerStop();
        }
    }
    getAppDir() {
        return this.applicationContext.getInformationService().getAppDir();
    }
    getBaseDir() {
        return this.applicationContext.getInformationService().getBaseDir();
    }
    defineApplicationProperties(applicationProperties = {}, whiteList = []) {
        const defaultApplicationProperties = {
            getBaseDir: () => {
                return this.getApplicationContext()
                    .getInformationService()
                    .getBaseDir();
            },
            getAppDir: () => {
                return this.getApplicationContext().getInformationService().getAppDir();
            },
            getEnv: () => {
                return this.getApplicationContext()
                    .getEnvironmentService()
                    .getCurrentEnvironment();
            },
            getApplicationContext: () => {
                return this.getApplicationContext();
            },
            getConfig: (key) => {
                return this.getApplicationContext()
                    .getConfigService()
                    .getConfiguration(key);
            },
            getFrameworkType: () => {
                return this.getFrameworkType();
            },
            getProcessType: () => {
                return interface_1.MidwayProcessTypeEnum.APPLICATION;
            },
            getCoreLogger: () => {
                return this.getCoreLogger();
            },
            getLogger: (name) => {
                return this.getLogger(name);
            },
            createLogger: (name, options = {}) => {
                return this.createLogger(name, options);
            },
            getProjectName: () => {
                return this.getProjectName();
            },
            createAnonymousContext: (extendCtx) => {
                const ctx = extendCtx || Object.create(this.defaultContext);
                if (!ctx.startTime) {
                    ctx.startTime = Date.now();
                }
                if (!ctx.logger) {
                    ctx.logger = this.createContextLogger(ctx);
                }
                if (!ctx.requestContext) {
                    ctx.requestContext = new requestContainer_1.MidwayRequestContainer(ctx, this.getApplicationContext());
                    ctx.requestContext.ready();
                }
                if (!ctx.getLogger) {
                    ctx.getLogger = name => {
                        return this.createContextLogger(ctx, name);
                    };
                }
                return ctx;
            },
            setContextLoggerClass: (BaseContextLogger) => {
                return this.setContextLoggerClass(BaseContextLogger);
            },
            addConfigObject(obj) {
                this.getApplicationContext().getConfigService().addObject(obj);
            },
            setAttr(key, value) {
                this.getApplicationContext().setAttr(key, value);
            },
            getAttr(key) {
                return this.getApplicationContext().getAttr(key);
            },
        };
        for (const method of whiteList) {
            delete defaultApplicationProperties[method];
        }
        Object.assign(this.app, defaultApplicationProperties, applicationProperties);
    }
    async beforeStop() { }
    async beforeContainerInitialize(options) { }
    async afterContainerInitialize(options) { }
    async afterContainerDirectoryLoad(options) { }
    async afterContainerReady(options) { }
    async loadLifeCycles(isForce = false) {
        // agent 不加载生命周期
        if (this.app.getProcessType() === interface_1.MidwayProcessTypeEnum.AGENT)
            return;
        const cycles = (0, decorator_1.listModule)(decorator_1.CONFIGURATION_KEY);
        const lifecycleInstanceList = [];
        for (const cycle of cycles) {
            if (cycle.target instanceof configuration_1.FunctionalConfiguration) {
                // 函数式写法
                cycle.instance = cycle.target;
            }
            else {
                // 普通类写法
                const providerId = (0, decorator_1.getProviderId)(cycle.target);
                if (this.getApplicationContext().registry.hasDefinition(providerId)) {
                    cycle.instance =
                        await this.getApplicationContext().getAsync(providerId);
                }
            }
            cycle.instance && lifecycleInstanceList.push(cycle);
        }
        // exec onConfigLoad()
        for (const cycle of lifecycleInstanceList) {
            if (typeof cycle.instance.onConfigLoad === 'function') {
                const configData = await cycle.instance.onConfigLoad(this.getApplicationContext());
                if (configData) {
                    this.getApplicationContext().getConfigService().addObject(configData);
                }
            }
        }
        for (const cycle of lifecycleInstanceList) {
            if (typeof cycle.instance.onReady === 'function') {
                /**
                 * 让组件能正确获取到 bind 之后 registerObject 的对象有三个方法
                 * 1、在 load 之后修改 bind，不太可行
                 * 2、每次 getAsync 的时候，去掉 namespace，同时还要查找当前全局的变量，性能差
                 * 3、一般只会在 onReady 的地方执行 registerObject（否则没有全局的意义），这个取巧的办法就是 onReady 传入一个代理，其中绑定当前的 namespace
                 */
                await cycle.instance.onReady(new Proxy(this.getApplicationContext(), {
                    get: function (target, prop, receiver) {
                        if (prop === 'getCurrentNamespace' && cycle.namespace) {
                            return () => {
                                return cycle.namespace;
                            };
                        }
                        return Reflect.get(target, prop, receiver);
                    },
                }), this.app);
            }
        }
    }
    async stopLifeCycles() {
        const cycles = (0, decorator_1.listModule)(decorator_1.CONFIGURATION_KEY);
        for (const cycle of cycles) {
            let inst;
            if (cycle.target instanceof configuration_1.FunctionalConfiguration) {
                // 函数式写法
                inst = cycle.target;
            }
            else {
                const providerId = (0, decorator_1.getProviderId)(cycle.target);
                inst = await this.applicationContext.getAsync(providerId);
            }
            if (inst.onStop && typeof inst.onStop === 'function') {
                await inst.onStop(new Proxy(this.getApplicationContext(), {
                    get: function (target, prop, receiver) {
                        if (prop === 'getCurrentNamespace' && cycle.namespace) {
                            return () => {
                                return cycle.namespace;
                            };
                        }
                        return Reflect.get(target, prop, receiver);
                    },
                }), this.app);
            }
        }
    }
    /**
     * load preload module for container
     * @private
     */
    async loadPreloadModule() {
        // some common decorator implementation
        const modules = (0, decorator_1.listPreloadModule)();
        for (const module of modules) {
            // preload init context
            await this.applicationContext.getAsync(module);
        }
    }
    getLogger(name) {
        var _a;
        return (_a = logger_1.loggers.getLogger(name)) !== null && _a !== void 0 ? _a : this.appLogger;
    }
    getCoreLogger() {
        return this.logger;
    }
    createLogger(name, option = {}) {
        return (0, logger_2.createMidwayLogger)(this, name, option);
    }
    getProjectName() {
        return this.applicationContext.getInformationService().getProjectName();
    }
    getFrameworkName() {
        return this.getFrameworkType().toString();
    }
    getDefaultContextLoggerClass() {
        return logger_1.MidwayContextLogger;
    }
}
exports.BaseFramework = BaseFramework;
//# sourceMappingURL=baseFramework.js.map