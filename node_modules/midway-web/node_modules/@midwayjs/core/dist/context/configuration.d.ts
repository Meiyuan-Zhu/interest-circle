import { IContainerConfiguration, IMidwayContainer } from '../interface';
export declare class ContainerConfiguration implements IContainerConfiguration {
    container: IMidwayContainer & {
        bindClass(exports: any, namespace: string): any;
    };
    namespace: string;
    packageName: string;
    loadDirs: string[];
    loadModules: any[];
    importObjects: {};
    newVersion: boolean;
    constructor(container: any);
    addLoadDir(dir: string): void;
    addImports(imports?: any[], baseDir?: string): void;
    addImportObjects(importObjects: Record<string, unknown>): void;
    getImportObjects(): {};
    addImportConfigs(importConfigs: any[], baseDir: string): void;
    private resolvePackageBaseDir;
    load(packageName: string): void;
    loadComponentObject(componentObject: any): void;
    loadConfiguration(configuration: any, baseDir: any, filePath?: string): void;
    /**
     * 用于 ready 或者 stop 时处理 lifecycle 实现
     * @param clzz configuration class
     */
    bindConfigurationClass(clzz: any, filePath?: string): void;
    getImportDirectory(): string[];
    private getConfigurationExport;
}
//# sourceMappingURL=configuration.d.ts.map