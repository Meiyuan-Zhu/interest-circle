/**
 * 基础的ObjectFactory和ApplicationContext实现
 */
import { ObjectIdentifier } from '@midwayjs/decorator';
import { IApplicationContext, IMessageSource, IObjectDefinition, IObjectDefinitionRegistry, IObjectFactory, ObjectDependencyTree } from '../interface';
import { ObjectProperties } from '../definitions/properties';
import { ManagedResolverFactory } from './managedResolverFactory';
export declare class ObjectDefinitionRegistry extends Map implements IObjectDefinitionRegistry {
    private singletonIds;
    get identifiers(): any[];
    get count(): number;
    getSingletonDefinitionIds(): ObjectIdentifier[];
    getDefinitionByName(name: string): IObjectDefinition[];
    registerDefinition(identifier: ObjectIdentifier, definition: IObjectDefinition): void;
    getDefinition(identifier: ObjectIdentifier): IObjectDefinition;
    getDefinitionByPath(path: string): IObjectDefinition;
    removeDefinition(identifier: ObjectIdentifier): void;
    hasDefinition(identifier: ObjectIdentifier): boolean;
    clearAll(): void;
    hasObject(identifier: ObjectIdentifier): boolean;
    registerObject(identifier: ObjectIdentifier, target: any): void;
    getObject(identifier: ObjectIdentifier): any;
}
export declare class BaseApplicationContext implements IApplicationContext, IObjectFactory {
    protected readied: boolean;
    protected midwayIdentifiers: string[];
    private _resolverFactory;
    private _registry;
    private _props;
    private _dependencyMap;
    baseDir: string;
    parent: IApplicationContext;
    messageSource: IMessageSource;
    disableConflictCheck: boolean;
    constructor(baseDir?: string, parent?: IApplicationContext);
    get dependencyMap(): Map<string, ObjectDependencyTree>;
    get props(): ObjectProperties;
    get registry(): IObjectDefinitionRegistry;
    set registry(registry: IObjectDefinitionRegistry);
    protected getManagedResolverFactory(): ManagedResolverFactory;
    /**
     * 继承实现时需要调用super
     */
    protected init(): void;
    stop(): Promise<void>;
    ready(): Promise<void>;
    protected loadDefinitions(): void;
    isAsync(identifier: ObjectIdentifier): boolean;
    get<T>(identifier: {
        new (): T;
    }, args?: any): T;
    get<T>(identifier: ObjectIdentifier, args?: any): T;
    getAsync<T>(identifier: {
        new (): T;
    }, args?: any): Promise<T>;
    getAsync<T>(identifier: ObjectIdentifier, args?: any): Promise<T>;
    get isReady(): boolean;
    /**
     * proxy registry.registerDefinition
     * @param {ObjectIdentifier} identifier
     * @param {IObjectDefinition} definition
     */
    registerDefinition(identifier: ObjectIdentifier, definition: IObjectDefinition): void;
    /**
     * proxy registry.registerObject
     * @param {ObjectIdentifier} identifier
     * @param target
     */
    registerObject(identifier: ObjectIdentifier, target: any): void;
    /**
     * register handler after instance create
     * @param fn
     */
    afterEachCreated(fn: (ins: any, context: IApplicationContext, definition?: IObjectDefinition) => void): void;
    /**
     * register handler before instance create
     * @param fn
     */
    beforeEachCreated(fn: (Clzz: any, constructorArgs: any[], context: IApplicationContext) => void): void;
    protected createObjectDependencyTree(identifier: any, definition: any): void;
}
//# sourceMappingURL=applicationContext.d.ts.map