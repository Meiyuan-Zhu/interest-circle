"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticConfigLoader = void 0;
const path_1 = require("path");
const decorator_1 = require("@midwayjs/decorator");
const __1 = require("..");
const configService_1 = require("../service/configService");
class StaticConfigLoader {
    constructor(baseDir, currentEnvironment) {
        this.baseDir = baseDir;
        this.configService = new configService_1.MidwayConfigService({
            getCurrentEnv() {
                return currentEnvironment;
            },
        });
    }
    async getSerializeConfig() {
        const mainModule = (0, __1.safeRequire)(this.baseDir);
        let mainConfiguration;
        if (mainModule && mainModule['Configuration']) {
            mainConfiguration = mainModule['Configuration'];
        }
        else {
            mainConfiguration = (0, __1.safeRequire)((0, path_1.join)(this.baseDir, 'src', 'configuration.ts'));
        }
        const modules = this.getConfigurationExport(mainConfiguration);
        for (const module of modules) {
            this.analyzeConfiguration(module);
        }
        await this.configService.load();
        return this.configService.getConfiguration();
    }
    analyzeConfiguration(configurationModule) {
        if (!configurationModule)
            return;
        const configurationOptions = (0, decorator_1.getClassMetadata)(decorator_1.CONFIGURATION_KEY, configurationModule);
        if (!configurationOptions)
            return;
        if (configurationOptions.imports) {
            for (const importModule of configurationOptions.imports) {
                if (typeof importModule !== 'string') {
                    this.analyzeConfiguration(importModule['Configuration']);
                }
            }
        }
        if (configurationOptions === null || configurationOptions === void 0 ? void 0 : configurationOptions.importConfigs) {
            this.configService.add(configurationOptions.importConfigs);
        }
    }
    getConfigurationExport(exports) {
        const mods = [];
        if ((0, decorator_1.isClass)(exports) || (0, decorator_1.isFunction)(exports)) {
            mods.push(exports);
        }
        else {
            for (const m in exports) {
                const module = exports[m];
                if ((0, decorator_1.isClass)(module) || (0, decorator_1.isFunction)(module)) {
                    mods.push(module);
                }
            }
        }
        return mods;
    }
}
exports.StaticConfigLoader = StaticConfigLoader;
//# sourceMappingURL=staticConfig.js.map