"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwayWebSingleProcessFramework = void 0;
const core_1 = require("@midwayjs/core");
const path_1 = require("path");
const koa_1 = require("@midwayjs/koa");
class MidwayWebSingleProcessFramework {
    getApplication() {
        return this.app;
    }
    getFrameworkType() {
        return core_1.MidwayFrameworkType.WEB;
    }
    async run() {
        // trigger server didReady
        this.app.messenger.emit('egg-ready');
        if (this.configurationOptions.port) {
            new Promise(resolve => {
                const args = [this.configurationOptions.port];
                if (this.configurationOptions.hostname) {
                    args.push(this.configurationOptions.hostname);
                }
                args.push(() => {
                    resolve();
                });
                this.server.listen(...args);
            });
        }
    }
    configure(options = {}) {
        this.configurationOptions = options;
        return this;
    }
    getApplicationContext() {
        return this.app.getApplicationContext();
    }
    getConfiguration(key) {
        return this.app.getConfig(key);
    }
    getCurrentEnvironment() {
        return this.app.getEnv();
    }
    async initialize(options) {
        const opts = {
            baseDir: options.appDir,
            framework: (0, path_1.resolve)(__dirname, '../application'),
            plugins: this.configurationOptions.plugins,
            mode: 'single',
            isTsMode: this.isTsMode || true,
            applicationContext: options.applicationContext,
            midwaySingleton: true,
        };
        const Agent = require(opts.framework).Agent;
        const Application = require(opts.framework).Application;
        const agent = (this.agent = new Agent(Object.assign({}, opts)));
        await agent.ready();
        const application = (this.app = new Application(Object.assign({}, opts)));
        application.agent = agent;
        agent.application = application;
        // https config
        if (this.configurationOptions.key && this.configurationOptions.cert) {
            this.configurationOptions.key = core_1.PathFileUtil.getFileContentSync(this.configurationOptions.key);
            this.configurationOptions.cert = core_1.PathFileUtil.getFileContentSync(this.configurationOptions.cert);
            this.configurationOptions.ca = core_1.PathFileUtil.getFileContentSync(this.configurationOptions.ca);
            if (this.configurationOptions.http2) {
                this.server = require('http2').createSecureServer(this.configurationOptions, this.app.callback());
            }
            else {
                this.server = require('https').createServer(this.configurationOptions, this.app.callback());
            }
        }
        else {
            if (this.configurationOptions.http2) {
                this.server = require('http2').createServer(this.app.callback());
            }
            else {
                this.server = require('http').createServer(this.app.callback());
            }
        }
        if (options.isMainFramework === undefined) {
            await this.loadExtension();
        }
    }
    async loadExtension() {
        // 延迟加载 egg 的 load 方法
        await this.app.loader.loadOrigin();
        await this.app.ready();
        // emit egg-ready message in agent and application
        this.app.messenger.broadcast('egg-ready', undefined);
        // emit `server` event in app
        this.app.emit('server', this.server);
        // register httpServer to applicationContext
        this.getApplicationContext().registerObject(core_1.HTTP_SERVER_KEY, this.server);
    }
    async stop() {
        await new Promise(resolve => {
            this.server.close(resolve);
        });
        await this.app.close();
        await this.agent.close();
    }
    getBaseDir() {
        return this.app.getBaseDir();
    }
    getAppDir() {
        return this.app.getAppDir();
    }
    getLogger(name) {
        return this.app.getLogger(name);
    }
    getCoreLogger() {
        return this.app.coreLogger;
    }
    getProjectName() {
        return this.app.getProjectName();
    }
    createLogger(name, options) {
        return this.app.createLogger(name, options);
    }
    getServer() {
        return this.server;
    }
    getFrameworkName() {
        return 'midway:web';
    }
    getDefaultContextLoggerClass() {
        return koa_1.MidwayKoaContextLogger;
    }
    loadLifeCycles() { }
}
exports.MidwayWebSingleProcessFramework = MidwayWebSingleProcessFramework;
//# sourceMappingURL=singleProcess.js.map