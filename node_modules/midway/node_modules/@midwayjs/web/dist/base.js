"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEggAgent = exports.createEggApplication = exports.createAgentWorkerLoader = exports.createAppWorkerLoader = void 0;
const utils_1 = require("./utils");
const extend = require("extend2");
const web_1 = require("./framework/web");
const core_1 = require("@midwayjs/core");
const path_1 = require("path");
const fs_1 = require("fs");
const logger_1 = require("./logger");
const router_1 = require("@eggjs/router");
const starter_1 = require("./starter");
const ROUTER = Symbol('EggCore#router');
const EGG_LOADER = Symbol.for('egg#loader');
const EGG_PATH = Symbol.for('egg#eggPath');
const LOGGERS = Symbol('EggApplication#loggers');
let customFramework = null;
function getFramework() {
    if (customFramework)
        return customFramework;
    /**
     * create real egg loader and application object
     */
    const pkg = (0, core_1.safeRequire)((0, path_1.join)(process.env.MIDWAY_PROJECT_APPDIR || process.cwd(), 'package.json'), false);
    customFramework = (0, core_1.safelyGet)('egg.framework', pkg);
    if (customFramework) {
        return customFramework;
    }
    else {
        return 'egg';
    }
}
const createAppWorkerLoader = () => {
    var _a;
    const AppWorkerLoader = ((_a = require(getFramework())) === null || _a === void 0 ? void 0 : _a.AppWorkerLoader) || require('egg').AppWorkerLoader;
    class EggAppWorkerLoader extends AppWorkerLoader {
        constructor() {
            super(...arguments);
            this.useEggSocketIO = false;
        }
        getEggPaths() {
            if (!this.appDir) {
                // 这里的逻辑是为了兼容老 cluster 模式
                if (this.app.options.typescript || this.app.options.isTsMode) {
                    process.env.EGG_TYPESCRIPT = 'true';
                }
                const result = (0, utils_1.parseNormalDir)(this.app.options['baseDir'], this.app.options.isTsMode);
                this.baseDir = result.baseDir;
                this.options.baseDir = this.baseDir;
                this.appDir = this.app.appDir = result.appDir;
            }
            const result = super.getEggPaths();
            const monorepoRoot = (0, utils_1.findLernaRoot)();
            if (monorepoRoot) {
                result.push(monorepoRoot);
            }
            if (process.env.MIDWAY_EGG_PLUGIN_PATH) {
                result.push(process.env.MIDWAY_EGG_PLUGIN_PATH);
            }
            if (process.cwd() !== this.appDir) {
                result.push(this.appDir);
            }
            const pathSet = new Set(result);
            return Array.from(pathSet);
        }
        getAppInfo() {
            if (!this.appInfo) {
                const appInfo = super.getAppInfo();
                // ROOT == HOME in prod env
                this.appInfo = extend(true, appInfo, {
                    root: appInfo.env === 'local' || appInfo.env === 'unittest'
                        ? this.appDir
                        : appInfo.root,
                    appDir: this.appDir,
                });
            }
            return this.appInfo;
        }
        getServerEnv() {
            // 这里和 egg 不同的是，一是修改了根路径，二是增加了环境变量
            let serverEnv = this.options.env;
            let envPath = (0, path_1.join)(this.appDir, 'config/env');
            if (!serverEnv && (0, fs_1.existsSync)(envPath)) {
                serverEnv = (0, fs_1.readFileSync)(envPath, 'utf8').trim();
            }
            envPath = (0, path_1.join)(this.appDir, 'config/serverEnv');
            if (!serverEnv && (0, fs_1.existsSync)(envPath)) {
                serverEnv = (0, fs_1.readFileSync)(envPath, 'utf8').trim();
            }
            if (!serverEnv) {
                serverEnv = process.env.MIDWAY_SERVER_ENV || process.env.EGG_SERVER_ENV;
            }
            if (!serverEnv) {
                serverEnv = super.getServerEnv();
            }
            else {
                serverEnv = serverEnv.trim();
            }
            if (serverEnv && !process.env.MIDWAY_SERVER_ENV) {
                process.env.MIDWAY_SERVER_ENV = serverEnv;
            }
            return serverEnv;
        }
        load() {
            this.framework = new web_1.MidwayWebFramework().configure({
                processType: 'application',
                app: this.app,
                globalConfig: this.app.config,
            });
            this.bootstrap = new starter_1.WebBootstrapStarter({
                isWorker: true,
                applicationContext: this.app.options.applicationContext,
            });
            this.bootstrap
                .configure({
                appDir: this.app.appDir,
            })
                .load(this.framework);
            if (this.app.options['midwaySingleton'] !== true) {
                if (!global['MIDWAY_MAIN_FRAMEWORK']) {
                    global['MIDWAY_MAIN_FRAMEWORK'] = this.framework;
                }
                // 这个代码只会在 egg-cluster 模式下执行
                this.app.beforeStart(async () => {
                    await this.bootstrap.init();
                    super.load();
                });
            }
        }
        /**
         * 这个代码只会在单进程 bootstrap.js 模式下执行
         */
        async loadOrigin() {
            await this.bootstrap.init();
            super.load();
        }
        loadMiddleware() {
            super.loadMiddleware();
            if (this.plugins['io']) {
                this.useEggSocketIO = true;
                const sessionMiddleware = this.app.middlewares['session'](this.app.config['session'], this.app);
                sessionMiddleware._name = 'session';
                this.app.use(sessionMiddleware);
            }
        }
    }
    return EggAppWorkerLoader;
};
exports.createAppWorkerLoader = createAppWorkerLoader;
const createAgentWorkerLoader = () => {
    var _a;
    const AppWorkerLoader = ((_a = require(getFramework())) === null || _a === void 0 ? void 0 : _a.AgentWorkerLoader) ||
        require('egg').AgentWorkerLoader;
    class EggAppWorkerLoader extends AppWorkerLoader {
        getEggPaths() {
            if (!this.appDir) {
                if (this.app.options.typescript || this.app.options.isTsMode) {
                    process.env.EGG_TYPESCRIPT = 'true';
                }
                const result = (0, utils_1.parseNormalDir)(this.app.options['baseDir'], this.app.options.isTsMode);
                this.baseDir = result.baseDir;
                this.options.baseDir = this.baseDir;
                this.appDir = this.app.appDir = result.appDir;
            }
            const result = super.getEggPaths();
            const monorepoRoot = (0, utils_1.findLernaRoot)();
            if (monorepoRoot) {
                result.push(monorepoRoot);
            }
            if (process.env.MIDWAY_EGG_PLUGIN_PATH) {
                result.push(process.env.MIDWAY_EGG_PLUGIN_PATH);
            }
            if (process.cwd() !== this.appDir) {
                result.push(this.appDir);
            }
            const pathSet = new Set(result);
            return Array.from(pathSet);
        }
        getAppInfo() {
            if (!this.appInfo) {
                const appInfo = super.getAppInfo();
                // ROOT == HOME in prod env
                this.appInfo = extend(true, appInfo, {
                    root: appInfo.env === 'local' || appInfo.env === 'unittest'
                        ? this.appDir
                        : appInfo.root,
                    appDir: this.appDir,
                });
            }
            return this.appInfo;
        }
        getServerEnv() {
            // 这里和 egg 不同的是，一是修改了根路径，二是增加了环境变量
            let serverEnv = this.options.env;
            let envPath = (0, path_1.join)(this.appDir, 'config/env');
            if (!serverEnv && (0, fs_1.existsSync)(envPath)) {
                serverEnv = (0, fs_1.readFileSync)(envPath, 'utf8').trim();
            }
            envPath = (0, path_1.join)(this.appDir, 'config/serverEnv');
            if (!serverEnv && (0, fs_1.existsSync)(envPath)) {
                serverEnv = (0, fs_1.readFileSync)(envPath, 'utf8').trim();
            }
            if (!serverEnv) {
                serverEnv = process.env.MIDWAY_SERVER_ENV || process.env.EGG_SERVER_ENV;
            }
            if (!serverEnv) {
                serverEnv = super.getServerEnv();
            }
            else {
                serverEnv = serverEnv.trim();
            }
            if (serverEnv && !process.env.MIDWAY_SERVER_ENV) {
                process.env.MIDWAY_SERVER_ENV = serverEnv;
            }
            return serverEnv;
        }
        load() {
            this.framework = new web_1.MidwayWebFramework().configure({
                processType: 'agent',
                app: this.app,
                globalConfig: this.app.config,
            });
            this.bootstrap = new starter_1.WebBootstrapStarter({
                isWorker: false,
            });
            this.bootstrap
                .configure({
                appDir: this.app.appDir,
            })
                .load(this.framework);
            this.app.beforeStart(async () => {
                await this.bootstrap.init();
                super.load();
            });
        }
    }
    return EggAppWorkerLoader;
};
exports.createAgentWorkerLoader = createAgentWorkerLoader;
const createEggApplication = () => {
    var _a;
    const Application = ((_a = require(getFramework())) === null || _a === void 0 ? void 0 : _a.Application) || require('egg').Application;
    class EggApplication extends Application {
        constructor(options) {
            // eslint-disable-next-line constructor-super
            super(options);
        }
        get [EGG_LOADER]() {
            return null;
        }
        get [EGG_PATH]() {
            return __dirname;
        }
        get loggers() {
            if (!this[LOGGERS]) {
                this[LOGGERS] = (0, logger_1.createLoggers)(this);
            }
            return this[LOGGERS];
        }
        get router() {
            if (this[ROUTER]) {
                return this[ROUTER];
            }
            const router = (this[ROUTER] = new router_1.EggRouter({ sensitive: true }, this));
            return router;
        }
    }
    return EggApplication;
};
exports.createEggApplication = createEggApplication;
const createEggAgent = () => {
    var _a;
    const Agent = ((_a = require(getFramework())) === null || _a === void 0 ? void 0 : _a.Agent) || require('egg').Agent;
    class EggAgent extends Agent {
        constructor(options) {
            // eslint-disable-next-line constructor-super
            super(options);
        }
        get [EGG_LOADER]() {
            return null;
        }
        get [EGG_PATH]() {
            return __dirname;
        }
        get loggers() {
            if (!this[LOGGERS]) {
                this[LOGGERS] = (0, logger_1.createLoggers)(this);
            }
            return this[LOGGERS];
        }
    }
    return EggAgent;
};
exports.createEggAgent = createEggAgent;
//# sourceMappingURL=base.js.map