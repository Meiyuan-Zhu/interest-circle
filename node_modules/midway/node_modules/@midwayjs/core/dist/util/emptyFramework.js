"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightFramework = exports.ConfigFramework = exports.EmptyFramework = void 0;
const baseFramework_1 = require("../baseFramework");
const decorator_1 = require("@midwayjs/decorator");
const noop = {
    info() { },
    warn() { },
    error() { },
    debug() { },
    write() { },
};
/**
 * 一个不 ready 的空框架
 */
class EmptyFramework extends baseFramework_1.BaseFramework {
    constructor() {
        super(...arguments);
        this.logger = noop;
        this.appLogger = noop;
    }
    getFrameworkType() {
        return decorator_1.MidwayFrameworkType.EMPTY;
    }
    async run() { }
    async applicationInitialize(options) {
        this.app = {};
    }
    async containerReady() { }
    async afterContainerReady() { }
    async loadExtension() { }
}
exports.EmptyFramework = EmptyFramework;
/**
 * 一个只加载配置的框架
 */
class ConfigFramework extends baseFramework_1.BaseFramework {
    constructor() {
        super(...arguments);
        this.logger = noop;
        this.appLogger = noop;
    }
    getFrameworkType() {
        return decorator_1.MidwayFrameworkType.EMPTY;
    }
    async run() { }
    async applicationInitialize(options) {
        this.app = {};
        this.defineApplicationProperties();
    }
    async containerReady() {
        await this.applicationContext.ready();
    }
    async afterContainerReady() { }
    async loadExtension() { }
}
exports.ConfigFramework = ConfigFramework;
/**
 * 一个全量的空框架
 */
class LightFramework extends baseFramework_1.BaseFramework {
    getFrameworkType() {
        return decorator_1.MidwayFrameworkType.LIGHT;
    }
    async run() { }
    async applicationInitialize(options) {
        this.app = {};
        this.defineApplicationProperties();
    }
}
exports.LightFramework = LightFramework;
//# sourceMappingURL=emptyFramework.js.map