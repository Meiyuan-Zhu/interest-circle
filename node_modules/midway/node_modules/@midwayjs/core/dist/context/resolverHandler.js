"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResolverHandler = void 0;
const decorator_1 = require("@midwayjs/decorator");
const util = require("util");
const debug = util.debuglog('midway:container');
class ResolverHandler {
    constructor(container, factory) {
        this.resolverFactory = factory;
        this.handlerMap = new Map();
        this.bindCreatedHook();
    }
    bindCreatedHook() {
        this.resolverFactory.beforeEachCreated(this.beforeEachCreated.bind(this));
        this.resolverFactory.afterEachCreated(this.afterEachCreated.bind(this));
    }
    /**
     * 创建对象前
     * @param target 当前对象
     * @param constructorArgs 构造参数
     * @param context 上下文
     */
    beforeEachCreated(target, constructorArgs, context) {
        let constructorMetaData;
        try {
            constructorMetaData = (0, decorator_1.getClassMetadata)(decorator_1.CLASS_KEY_CONSTRUCTOR, target);
        }
        catch (e) {
            debug(`beforeEachCreated error ${e.stack}`);
        }
        // lack of field
        if (constructorMetaData && constructorArgs) {
            for (const idx in constructorMetaData) {
                const index = parseInt(idx, 10);
                const propertyMeta = constructorMetaData[index];
                const hook = this.getHandler(propertyMeta.type);
                if (hook) {
                    constructorArgs[index] = hook(propertyMeta.key);
                }
            }
        }
    }
    /**
     * 创建对象后
     * @param instance 对象
     * @param context 上下文
     * @param definition 定义
     */
    afterEachCreated(instance, context, definition) {
        if (this.handlerMap.size > 0 && Array.isArray(definition.handlerProps)) {
            // 已经预先在 bind 时处理
            for (const item of definition.handlerProps) {
                this.defineGetterPropertyValue(item.prop, instance, this.getHandler(item.handlerKey));
            }
        }
    }
    /**
     * binding getter method for decorator
     *
     * @param setterProps
     * @param instance
     * @param getterHandler
     */
    defineGetterPropertyValue(prop, instance, getterHandler) {
        if (prop && getterHandler) {
            if (prop.propertyName) {
                Object.defineProperty(instance, prop.propertyName, {
                    get: () => getterHandler(prop.key, prop.meta, instance),
                    configurable: true,
                    enumerable: true,
                });
            }
        }
    }
    registerHandler(key, fn) {
        this.handlerMap.set(key, fn);
    }
    getHandler(key) {
        if (this.handlerMap.has(key)) {
            return this.handlerMap.get(key);
        }
    }
}
exports.ResolverHandler = ResolverHandler;
//# sourceMappingURL=resolverHandler.js.map