export interface GetFileStreamOptions {
    requireFile?: boolean;
    defCharset?: string;
    limits?: {
        fieldNameSize?: number;
        fieldSize?: number;
        fields?: number;
        fileSize?: number;
        files?: number;
        parts?: number;
        headerPairs?: number;
    };
    checkFile?(fieldname: string, file: any, filename: string, encoding: string, mimetype: string): void | Error;
}
export interface GetFilesStreamOptions extends GetFileStreamOptions {
    autoFields?: boolean;
}
export declare enum RouteParamTypes {
    QUERY = 0,
    BODY = 1,
    PARAM = 2,
    HEADERS = 3,
    SESSION = 4,
    FILESTREAM = 5,
    FILESSTREAM = 6,
    NEXT = 7,
    REQUEST_PATH = 8,
    REQUEST_IP = 9,
    QUERIES = 10
}
export interface RouterParamValue {
    index: number;
    type: RouteParamTypes;
    propertyData?: any;
}
export declare const Session: (property?: string) => (target: any, propertyName: any, index: any) => void;
export declare const Body: (property?: string) => (target: any, propertyName: any, index: any) => void;
export declare const Query: (property?: string) => (target: any, propertyName: any, index: any) => void;
export declare const Param: (property?: string) => (target: any, propertyName: any, index: any) => void;
export declare const Headers: (property?: string) => (target: any, propertyName: any, index: any) => void;
export declare const File: (property?: GetFileStreamOptions) => (target: any, propertyName: any, index: any) => void;
export declare const Files: (property?: GetFilesStreamOptions) => (target: any, propertyName: any, index: any) => void;
export declare const RequestPath: () => (target: any, propertyName: any, index: any) => void;
export declare const RequestIP: () => (target: any, propertyName: any, index: any) => void;
export declare const Queries: (property?: string) => (target: any, propertyName: any, index: any) => void;
//# sourceMappingURL=paramMapping.d.ts.map